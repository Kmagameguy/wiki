{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KevBot's Wiki","text":"<p>This wiki contains a collection of random technical things that are important to me in some way or another. Maybe you will find them helpful too.</p>"},{"location":"android/android_apps_without_smartphone/","title":"Run Android Apps Without a Smartphone","text":""},{"location":"android/android_apps_without_smartphone/#why-would-you-do-this","title":"Why Would You Do This?","text":"<p>Frustratingly, access to more and more services are locked behind smartphone apps. For some apps (ridesharing comes to mind) this makes a lot of sense.  However for others, (e.g. Amazon Care) this makes a lot less sense.  For me this is a worrying trend as it means:</p> <ol> <li>Only those privileged with the ability to afford smartphones can access these services. This fast becomes a discriminatory practice and is fundamentally anti-consumer</li> <li>It affords the vendor more ability to abuse private info.  By restricting access to mobile apps, vendors are given easier access to mobile phone data that can then be slurped out of the device and sold off to advertisers, yuck</li> <li>For the privacy-conscious it makes separating employer concerns from personal ones difficult</li> </ol> <p>Number 3 is what prompted me to write this guide.  My employer is increasingly requiring users to access services which only provide mobile app access.  My phone isn't compatible with some of these programs, and, I also think it's an invasion of my personal privacy/rights for an employer to expect access to my personal device(s).  </p> <p>Enter android-x86 and VirtualBox.  No matter what your platform of choice is (Linux, Windows, macOS), you will be able to use this guide to run an emulated copy of the Android operating system.  This means you will be able to install and run Android apps right on your desktop/laptop computer.</p> This seems complicated... <p>Yes, this is far from the most efficient way to run Android. BlueStacks is  a more user friendly way to run an Android emulator.  Unfortunately I couldn't get  BlueStacks 4 working on macOS Monterey, but it's just using VirtualBox under the hood anyway.  So, I'm taking the DIY approach here since it offers more control</p>"},{"location":"android/android_apps_without_smartphone/#overview","title":"Overview","text":"<p>If you're with me so far, here's what we're gonna cover:</p> <ol> <li>What to download &amp; why</li> <li>How to configure VirtualBox</li> <li>How to install Android in VirtualBox</li> <li>Android first-time setup</li> <li>Installing an app</li> </ol> <p>I will try to keep this guide as platform-agnostic as possible, but if I'm being honest I ran through these steps on macOS and I don't have a Windows box around for testing purposes.  As a result some of the steps may be mac-biased but hopefully they're intuitive enough that you'll be able to figure things out on your own platform of choice!</p>"},{"location":"android/android_apps_without_smartphone/#before-we-begin","title":"Before We Begin","text":"<p>Before we get started, make sure your system has enough resources to support this project:</p> <ul> <li>Memory: At least 4GB</li> <li>Disk space: At least 12GB</li> <li>An internet connection</li> </ul>"},{"location":"android/android_apps_without_smartphone/#downloading-things","title":"Downloading Things","text":"<p>The two things we need to get started are VirtualBox &amp; an Android installer.  VirtualBox is a \"Virtual Machine\" manager.  A virtual machine is like putting a computer in a box.  Your computer (the \"host\") runs VirtualBox, which then runs the second system (the \"guest\", in our case, the Android system) on top.  The \"guest\" is displayed in a Window just like any other program on your computer.  Very cool.</p>"},{"location":"android/android_apps_without_smartphone/#virtualbox","title":"VirtualBox","text":"<p>Start by downloading VirtualBox from its homepage.  There should be a big download button you can click once you've followed that link.  The next page is text-heavy and might be disorienting at first.  Just find the \"VirtualBox Binaries\" section (it should be first on the page), then look for a header that looks like \"VirtualBox x.x.xx platform packages\".  At time of writing the header reads \"VirtualBox 6.1.30 platform packages\".  </p> <p>Under that heading should be a bulleted list of links.  Find the one that matches your system:</p> <ul> <li>Windows hosts = Click this if you are on a Windows computer</li> <li>OS X hosts = Click this if you are on a Mac computer</li> <li>Linux distributions = Click this if you are on a Linux computer (we assume you know what you're doing)</li> </ul> <p>Clicking the Windows or Mac links will begin the download!  Next we'll grab Android.</p>"},{"location":"android/android_apps_without_smartphone/#android","title":"Android","text":"<p>The Android package is referred to as an \"image\" file and contains a pre-configured set of tools that automatically (well, mostly!) set up a brand new copy of the Android operating system.  If you've ever inserted a CD into your computer and installed a program from it, this process is effectively very similar!  </p> <p>We'll download the Android image from the Android-x86 project. On the homepage should be a big \"Download\" button.  Click that and you'll be taken to a new page which links to a couple different storage locations (at time of writing, FOSSHUB and OSDN).  I followed the link to FOSSHUB but it doesn't really matter which one you pick -- they have the same files and are just a way for the project to make sure their servers distribute traffic to avoid being overloaded.  </p> <p>Both mirror sites have a list of different files so we need to pick the correct one.  Look for ones that are labeled as an \"ISO\" file (.iso).  These are offered in two flavors: 32-bit &amp; 64-bit.  Both will work fine but I prefer the 64-bit version.  So, putting those together, here's what you should look for:</p> <p>FOSSHUB:</p> <ul> <li>Download the file labeled \"Android-x86 64-bit ISO file\" by clicking its link</li> </ul> <p>OSDN:</p> <ul> <li>Download the file that looks like this: \"android-x86_64-8.1-r6.iso\".<ul> <li>The \"-8.1-r6\" part of the filename will change over time.  That simply identifies the file version, so yours may look newer than what's written here</li> <li>Notice the \"_64\" part of the filename -- that identifies the file as the \"64-bit\" copy.  The 32-bit will just read \"x86-8.1-r6\" by contrast</li> </ul> </li> </ul> <p>Clicking the link will begin the download!  Wait for VirtualBox's installer and this ISO file to finish downloading before moving on to the next steps!</p>"},{"location":"android/android_apps_without_smartphone/#installing-virtualbox","title":"Installing VirtualBox","text":""},{"location":"android/android_apps_without_smartphone/#installing-the-base-program","title":"Installing the Base Program","text":"<ol> <li> <p>Run the VirtualBox installer</p> macOS <ol> <li>Double click the .dmg</li> <li>Double click \"VirtualBox.pkg\" in the pop-up window</li> <li>Click through the install wizard, keeping all settings at their defaults (enter your password if prompted)</li> <li>Open System Preferences &gt; Security &amp; Privacy &gt; General</li> <li>Unlock the panel by clicking the lock icon in the lower-left corner and plugging in your password</li> <li>Click the \"Allow\" button next to the snippet of text that is asking for permission to allow the \"Oracle VM\" extension</li> <li>Restart your Mac so this extension gets loaded</li> </ol> Windows <ol> <li>Double click the .exe</li> <li>Click through the install wizard, keeping all settings at their defaults (enter your password if prompted)</li> </ol> </li> </ol>"},{"location":"android/android_apps_without_smartphone/#creating-an-empty-virtual-machine","title":"Creating an Empty Virtual Machine","text":"<ol> <li>Open the VirtualBox program</li> <li>Click on \"Tools\", then the \"New\" button (it looks like a very pointy circle)</li> </ol> <p>In this menu will be a few options we'll need to change.  Set them up like so:</p> <ol> <li>Name: This can be anything you want. I chose \"Android\"</li> <li>Machine Folder: Pick a place on your computer for VirtualBox to store its files.  I made a new \"VirtualBox VMs\" folder inside my documents folder</li> <li>Type: Linux</li> <li>Version: Linux 2.6 / 3.x / 4.x (64-bit)<ul> <li>Select \"32-bit\" if you chose to download a 32-bit ISO earlier!</li> </ul> </li> <li>Click \"Continue\"</li> <li>Set the memory size to something like 4096MB.  You may also go as low as 2048MB if necessary; this depends on what your system has available.  If you're unsure, just avoid pushing the slider into the pink/red zones!</li> <li>Click \"Continue\"</li> <li>Make sure \"Create a virtual hard disk now\" is selected</li> <li>Click \"Create\"</li> <li>On the next screen, set the Hard disk file type to \"VDI (VirtualBox Disk Image)\"</li> <li>Click \"Continue\"</li> <li>On the next screen, make sure \"Dynamically allocated\" is selected</li> <li>Click \"Continue\"</li> <li>Choose a place for VirtualBox to save the virtual hard disk (this path should be pre-filled for you)</li> <li>Set the virtual hard disk size to 8.00 GB</li> </ol>"},{"location":"android/android_apps_without_smartphone/#configuring-the-virtual-machine-startup-options","title":"Configuring the Virtual Machine Startup Options","text":"<ol> <li>Select your newly created Virtual machine from the VirtualBox sidebar</li> <li>Click the \"Settings\" button in the top menu bar</li> <li>Open the \"Display\" tab</li> <li>Change \"Graphics Controller\" to \"VBoxVGA\"</li> <li>Ensure \"3D Acceleration\" is OFF</li> <li>Click \"OK\"</li> </ol> <p>Now your virtual machine is all set!  The next steps will get Android installed.  </p>"},{"location":"android/android_apps_without_smartphone/#installing-android","title":"Installing Android","text":""},{"location":"android/android_apps_without_smartphone/#loading-the-android-iso","title":"Loading the Android ISO","text":"<ol> <li>Select your Virtual machine from the VirtualBox sidebar</li> <li>Click the \"Start\" button in the top menu</li> <li>VirtualBox will ask you to insert a virtual optical disk -- Click the folder icon</li> <li>Click the \"Add\" button</li> <li>Find the Android ISO file you downloaded earlier and open it</li> <li>Click \"Choose\"</li> <li>Click \"Start\"</li> </ol>"},{"location":"android/android_apps_without_smartphone/#creating-disk-partitions-installing-android","title":"Creating Disk Partitions &amp; Installing Android","text":"<p>The next steps will require you to use your keyboard (arrow keys and the enter key, primarily)</p> <ol> <li>When prompted, use your down arrow key to highlight the \"Installation - Install Android-x86 to harddisk\" option</li> <li>Press the Enter key (return on macOS)</li> <li>Highlight \"Create/Modify partitions\" with the arrow keys</li> <li>Press \"Enter\"</li> <li>Highlight \"NO\" at the \"Do you want to use GPT?\" screen using the arrow keys</li> <li>Press \"Enter\"</li> <li>Use the arrow keys to highlight the \"New\" option at the bottom of the screen</li> <li>Press \"Enter\"</li> <li>Use the arrow keys to highlight the \"Primary\" option at the bottom of the screen</li> <li>Press \"Enter\", then \"Enter\" a second time to confirm the default partition size</li> <li>Use the arrow keys to highlight the \"Bootable\" option at the bottom of the screen</li> <li> <p>Press \"Enter\" -- this will set the \"Boot\" flag in the grey highlighted row in the table up top</p> Not Sure if the Boot Flag Was Set? <p>This is a little weird if you haven't created partitions before since the screen behaves differently from the preceding ones.  If you examine the table on this screen, you'll see a header row and a data row.  The headers will read things like \"Name\", \"Flags\", \"Part Type\", \"FS Type\", etc.  Look at the \"Flags\" column.  If the word \"boot\" appears beneath it then you're good!  If not, use the arrow keys to highlight the \"Bootable\" option at the bottom of the screen again and press \"Enter\".</p> </li> <li> <p>Use the arrow keys to highlight the \"Write\" option at the bottom of the screen</p> </li> <li>Press \"Enter\"</li> <li>The program will ask you to confirm your choice.  This time, type out the word \"yes\" and press \"Enter\"</li> <li>Once it finishes, use the arrow keys to highlight the \"Quit\" option at the bottom of the screen</li> <li>Press \"Enter\"</li> <li>On the next screen, make sure your new disk is highlighted (it'll read something like <code>sda1 unknown 8.00GB VBOXHARDDISK</code>)</li> <li>Press \"Enter\"</li> <li>Use the arrow keys to highlight the \"ext4\" option</li> <li>Press \"Enter\"</li> <li>Use the arrow keys to highlight the \"Yes\" option</li> <li>Press \"Enter\"</li> <li>Use the arrow keys to highlight the \"Yes\" option again</li> <li>Press \"Enter\" to install the GRUB bootloader</li> <li>Use the arrow keys to highlight the \"Yes\" option again</li> <li>Press \"Enter\" to mark /system as read/write</li> <li>Once the installation is finished, highlight \"Run Android-x86\"</li> <li>Press \"Enter\"</li> </ol> <p>You'll get dumped to a <code>console:/</code> line briefly.  After a couple seconds you should see the Android boot screen. Nice!  </p>"},{"location":"android/android_apps_without_smartphone/#ejecting-the-installation-media","title":"Ejecting the Installation Media","text":"<p>Once Android boots you'll see their installation wizard.  Before we continue, let's eject the installation media:</p> <ol> <li>Press Cmd + Q (mac) or Ctrl + Q (windows) to open the Virtual Machine's power management window</li> <li>Select \"Power off the machine\"</li> <li>Click \"OK\"</li> <li>Select your Virtual Machine from the VirtualBox sidebar</li> <li>Click \"Settings\"</li> <li>Click \"Storage\"</li> <li>Highlight the Android ISO file in the devices list (it'll have a CD icon next to it)</li> <li>Click the CD icon next to the \"Optical Drive\" dropdown in the \"Attributes\" section on the right</li> <li>Choose \"Remove Disk from Virtual Drive\"</li> <li>Click \"OK\"</li> </ol>"},{"location":"android/android_apps_without_smartphone/#booting-android-for-the-first-time","title":"Booting Android for the First Time","text":"<p>The next steps are pretty straightforward:</p> <ol> <li>Make sure the Virtual Machine is still highlighted and click \"Start\"</li> <li>This time you'll see a console screen with a list of options.  Wait ~5 seconds and Android will start up</li> </ol> <p>You'll now see the installation wizard again:</p> <ol> <li>Click \"Start\"</li> <li>On the \"Connect to Wi-Fi\" screen, click \"See All Wi-Fi Networks\"</li> <li>Select \"VirtWifi\" from the list (VirtualBox will passthrough your internet connection to Android; you don't actually have to be connected to WiFi if your internet is supplied by an ethernet cable)</li> <li>Android will check for updates; if any are available go ahead and install them.  Otherwise this step may take a while so just be patient</li> <li>Choose \"Don't Copy\" on the \"Copy apps &amp; data\" screen</li> <li> <p>On the Sign-in screen, enter your Google account credentials</p> <ul> <li>In my case, I used my work account since the purpose of this VM is to collect the junky apps required by my employer</li> </ul> Skipping Google Sign-In <p>You may optionally choose to skip the Google Sign-In step.  This may prevent you from installing Play store apps, though. </p> </li> <li> <p>Set your date and time as needed</p> </li> <li>Optionally, turn on/off Google Services to your liking, scroll down and click \"Accept\"</li> <li>Optionally, add a screen lock pattern/PIN/Password to your VM (in this case, a Password is probably the best option)</li> <li>Optionally, skip or configure Google Wallet</li> <li>Select \"No Thanks\" on the \"Anything Else?\" screen</li> <li>Click \"Quickstep\" on the Home Screen picker</li> <li>Click \"Always\"</li> </ol> <p>Congratulations! You now have Android running inside a Virtual Machine.  </p>"},{"location":"android/android_apps_without_smartphone/#updating-the-system","title":"Updating the System","text":"<p>By default some of the included apps and services will likely be outdated.  We'll want to update them first before doing anything else:</p> <ol> <li>Open the \"Play Store\"</li> <li>Click the Hamburger menu in the top-left of the Play Store window</li> <li>Click \"My Apps &amp; Games\"</li> <li>Highlight the \"Updates\" tab if it's not selected by default</li> <li>Click the \"Update All\" button, if it's available</li> </ol> <p>I found the initial downloads can get stuck.  If this happens, try stopping the downloads and updating the apps individually.  You may have to work at this a little bit and a restart or two also can't hurt -- hey, I never said it'd be perfect!  </p> <p>You may also need to update Google Play Services separately.  To do that, click/drag from the top status bar downwards using your mouse to reveal the notification shade.  Look for a Google Play Services notification -- click that to open its updater page and apply it.  </p>"},{"location":"android/android_apps_without_smartphone/#taking-a-snapshot","title":"Taking a Snapshot","text":"<p>One of the great benefits of Virtual Machines is the \"Snapshot\" feature.  This lets you create a permanent capture of the state of the system.  Further, you can take multiple of these and jump back-and-forth between them. Installed an app or made a change that broke something? Just restore a snapshot!  We're going to take an intial snapshot so we can return to a very clean system at any time (and avoid having to do all the complicated steps above again if we break something).</p> <ol> <li>Press Cmd + Q (mac) or Ctrl + Q (windows) to open the power management window</li> <li>Choose \"Power off the machine\"</li> <li>Click the \"Take\" button in VirtualBox's top menu bar (it's the camera icon with a big \"+\" sign overlaid on it)</li> <li>Give the snapshot a name (I used \"Base_Install\") and add a description if you'd like</li> <li>Click \"OK\"</li> </ol> <p>Boom! Now you can return your Virtual Machine to this state at any time by highlighting it and clicking the \"Restore\" button.  </p>"},{"location":"android/android_apps_without_smartphone/#installing-an-app","title":"Installing an App","text":"<p>Now you can go crazy.  Start up the Virtual Machine again and launch the Play Store.  You can click into the search bar and use your keyboard and enter key to type out a search.  For example, try finding \"Adobe Acrobat\".  You can click on any of the search results to open the app's landing page.  From there, click the Install button and in a few moments you'll see the app icon appear on your home screen.  Clicking on the app icon will open it up, nice!  </p> <p>As a caveat, not all apps may work inside the emulator (I had trouble getting Amazon Care to run).  In these cases some more involved tinkering may be required, or, in worst cases you may simply be out of luck.  Otherwise most things run well (except maybe mobile games!).  </p> <p>Hopefully this is useful.  And if you are an IT person, please, don't forget that not everyone is fortunate enough to benefit from technology you may take for granted.  </p>"},{"location":"gallium_os/fixing_the_audio_system/","title":"Fixing the Gallium OS Audio System","text":"<p>Out of the box Gallium OS' audio drivers and settings work pretty well, all things considered.  My only issue was that the default volume cap was aggressively conservative -- even setting the pulseaudio output to 154% resulted in sounds that were barely louder than a whisper.</p> <p>Luckily this is pretty easy to fix!</p>"},{"location":"gallium_os/fixing_the_audio_system/#adjusting-speaker-headphone-max-volume-level","title":"Adjusting Speaker &amp; Headphone Max Volume Level","text":"<p>The max volume level is defined in a <code>HiFi.conf</code> file, which can be edited here:</p> <pre><code>sudo nano /usr/share/alsa/ucm/chtmax98090/HiFi.conf\n</code></pre> <p>With that file open, look for lines that look like this:</p> <pre><code>[...]\n\ncset \"name='Headphone Volume' 10\"\ncset \"name='Speaker Volume' 10\"\n</code></pre> <p>Change those values to something much higher.  In my case I went with:</p> <pre><code>cset \"name='Headphone Volume' 25\"\ncset \"name='Speaker Volume' 35\"\n</code></pre> <p>Save the edits and then reboot the system.  Test the audio volume slider -- if the maximum is still too low (or, now, too high), edit the file again and tweak the settings.  There is likely some danger in setting the volume too high, so it's good to find a comfortable maximum and adjust no further than that!</p>"},{"location":"general_guides/examining_disk_usage_linux/","title":"Examining Disk Usage on Linux Systems","text":"<p>An important part of administering any system is making sure you're not at your disk space limit.  This is especially true when running something like a media center or NAS which may run nightly download or backup jobs.</p>"},{"location":"general_guides/examining_disk_usage_linux/#the-gui-way","title":"The GUI Way","text":"<p>Most linux distributions' file browsing app will also display free vs. used disk space in a bottom or top bar.  Alternatively you can always navigate to <code>/</code> and right-click somewhere to open a properties window.  Chances are you'll find what you're looking for.</p>"},{"location":"general_guides/examining_disk_usage_linux/#the-terminal-way","title":"The Terminal Way","text":"<p>In other cases it may be advantageous to examing disk usage from the command line.  The most common use case is during an <code>ssh</code> session where a GUI option isn't viable.  To examine disk usage in the terminal, do the following:</p>"},{"location":"general_guides/examining_disk_usage_linux/#check-overall-disk-usage","title":"Check Overall Disk Usage","text":"<pre><code>$ df -h\n\nFilesystem    Size  Used  Avail  Use%  Mounted on\nudev          1.9G     0   1.9G    0%  /dev\ntmpfs         390M  1.5M   388M    1%  /run\n/dev/disk1     28G    5G    21G   23%  /dev/disk1\n</code></pre>"},{"location":"general_guides/examining_disk_usage_linux/#finding-large-files-folders","title":"Finding Large Files &amp; Folders","text":"<p>As disk usage creeps up you may find yourself wanting to perfom an audit of your system.  In doing so, you may be able to find &amp; delete big files/folders that are no longer needed.  To do this, I recommend <code>ncdu</code>.</p> <p><code>ncdu</code> is an ncurses utility that builds a filetree of your system directories and lets you browse them in the terminal.  Folders are sorted from the supplied path by their size, which makes it easy to see what's taking up space on your disk.</p>"},{"location":"general_guides/examining_disk_usage_linux/#installing-ncdu","title":"Installing NCDU","text":"<pre><code>sudo apt install ncdu\n</code></pre> <p>and yer done.</p>"},{"location":"general_guides/examining_disk_usage_linux/#using-ncdu","title":"Using NCDU","text":"<pre><code>ncdu &lt;optional-filepath&gt;\n</code></pre> <p>If no filepath is supplied, ncdu will build a listing based on the current working directory.  It's really that simple!</p>"},{"location":"general_guides/getting_good_prints_from_an_ender3v2/","title":"Ultimaker Cura Print Settings for Stock Ender3 v2","text":"<p>Not long ago I purchased a new Creality Ender3v2 3d printer on sale for about $150.00 USD.  It took quite a bit of trial and error to start getting reasonable prints on the stock unit so here are some notes from my experiments.  </p>"},{"location":"general_guides/getting_good_prints_from_an_ender3v2/#tightening-the-frame","title":"Tightening the Frame","text":"<p>One of the first things to check is whether the frame is snugged up together.  Specifically, the X-axis arm which can droop easily if the ends aren't tightened up.  You'll know if you got the tension right if (gentle) upward lift on the end opposite the stepper motor produces very little movement before meeting strong resistance.  Remember that tolerances in 3d printing are measured in millimeters so small variances can produce large effects.  </p>"},{"location":"general_guides/getting_good_prints_from_an_ender3v2/#bed-leveling","title":"Bed Leveling","text":"<p>People seem to make this out to be more difficult than it really is.  You don't need any fancy tools, and this is actually one of the few calibrations that works if the leveling is \"good enough\".  </p> <p>Bed Quality</p> <p>Out of the box, many 3D printers have beds that are not the best quality.  While Creality has done a lot to improve the glass bed that ships with the Ender3v2, I still ended up with a warped bed.  In my case, the center of the bed bows upwards ever-so-slightly, which means I tend to position all my prints on a Y-axis offset to avoid this raised area as much as possible.  If you have a similar issue you may need to employ a similar strategy.</p> <ol> <li>Turn ON your 3D printer and set it to auto-home</li> <li>Set the printer to preheat ~10 degrees hotter than your normal printing temperature (e.g. if you are printing PLA at 180c, preheat to 190c)</li> <li>Use the menus to disable the stepper motor</li> <li>Gently position the extruder nozzle above the center point of one of the bed's tension knobs</li> <li>Raise the bed using the knob and just visually watch until there is about a 1/8\" gap between the nozzle and the bed</li> <li>Repeat for each corner of the bed, moving in a clockwise (or counter-clockwise) motion</li> <li>Grab a piece of paper</li> <li>Once again, position the extruder nozzle above the center point of one of the bed's tension knobs</li> <li>Insert the paper between the nozzle and the bed</li> <li>Gently adjust the bed position upwards until you feel the faintest rubbing from the nozzle</li> <li>Repeat the previous two steps for each corner, but this time move diagonally opposite (so if you start at front-left, move to back-right, then back-left to front-right)</li> <li>While doing this you may start to move the print head and notice the nozzle is hitting the bed -- when this happens STOP and lower the bed a little bit, using the knobs that the print head is positioned between (e.g. if the print head hits the back of the board, between the back-left and back-right knobs, lower the bed using both of those knobs)</li> <li>Repeat the paper test in caddy-corner fashion until you are feeling just a little rubbing in each corner</li> <li>When all seems good, run the print head over the middle of the board front-to-back and side-to-side.  If you collide with the bed somewhere in the middle of the board use all four knobs to slowly lower the board an equal amount all around</li> </ol> <p>After 2-3 passes you should be \"good enough\".  Given enough time you will probably be able to visually do bed leveling.  Like I said above it doesn't need to be perfect -- feeling a little resistance, or positioning the bed a hair lower than the resistance point will be good enough.  </p> <p>Calibrate once every couple prints, especially if you apply pressure to the bed when trying to unstick finished prints from it.  </p>"},{"location":"general_guides/getting_good_prints_from_an_ender3v2/#choosing-the-right-software","title":"Choosing the Right Software","text":"<p>I use Ultimaker Cura for all of my prints.  It doesn't have a profile for the Ender3v2 though we can borrow many of the defaults from the original Ender3 profile:  </p> <ol> <li>Open Cura</li> <li>Open Preferences &gt; Configure Cura...</li> <li>Open Printers</li> <li>Choose \"+ Add\"</li> <li>Choose Add a non-networked printer</li> <li>Expand Creality3D, Select Creality Ender-3, and change the name to Creality Ender-3 V2</li> <li> <p>Match the \"Machine Settings\" to the tables below:  </p> Printer Settings Value X (Width) 220.0 mm Y (Depth) 220.0 mm Z (Height) 250.0 mm Build plate shape Rectangular Origin at center OFF Heated bed ON Heated build volume OFF G-code flavor Marlin Printhead Settings Value X min -26 mm Y min -32 mm X max 32 mm Y max 34 mm Gantry Height 25.0 mm Number of extruders 1 Apply Extruder Offsets to GCode ON </li> <li> <p>Press CLOSE to save the changes  </p> </li> </ol>"},{"location":"general_guides/getting_good_prints_from_an_ender3v2/#print-settings","title":"Print Settings","text":"<p>Once the printer is set up we'll want to dial in the print settings.  Some of this will depend on the filament you use, so here we'll be assuming PLA:  </p> <p>Warning</p> <p>These are simply the settings that work best for me, so they may or may not need tweaking if you decide to use them.  Print quality can be affected by anything from ambient temperature to humidity levels.  Generally speaking though, I've found these tweaks tend to produce more reliable prints than the stock settings.</p> <ol> <li>Printing Temperature: 195.0c</li> <li>Printing Temperature Initial Layer: 200.0c</li> <li>Build Plate Temperature: 65c</li> <li>Print Speed: 40-45mm/s</li> <li>Build Plate Adhesion Type: Raft for small prints, Brim for large prints  </li> </ol>"},{"location":"general_guides/getting_good_prints_from_an_ender3v2/#clean-up-and-maintenance","title":"Clean-Up and Maintenance","text":"<p>Like any other physical maker-material clean-up is just as important as the print itself.  I recommend the following routines:  </p>"},{"location":"general_guides/getting_good_prints_from_an_ender3v2/#after-every-print","title":"After Every Print","text":"<ol> <li>Clear any debris from the bed, wipe down with a cloth</li> <li>Examine the extruder nozzle for any signs of filament leakage, clean up any you might see with something heat-insulated (I have a very nice pair of needlepiont Tweezerman tweezers that do a great job of this)</li> </ol>"},{"location":"general_guides/getting_good_prints_from_an_ender3v2/#after-every-third-or-fourth-print","title":"After Every Third or Fourth Print","text":"<ol> <li>Clean the bed with Isopropyl Alcohol</li> <li>Auto-Home the nozzle and visually inspect the bed leveling</li> </ol> <p>Any other issues will be clearly noticeable during printing.  Oozing can be common, which may require replacement nozzles or just a cleaning of the heater block which can be done by removing the rubber sock covering it.  </p>"},{"location":"general_guides/grafana_server_on_focal_fossa/","title":"Running Grafana Server on Ubuntu Focal Fossa (20.04 LTS)","text":"<p>While consolidating some of my homelab services onto a new server I had a bear of a time getting grafana-server to run on Ubuntu 20.04.  The first issue was that I couldn't seem to get the service to work on a different port from the default.  The second issue was that the service refused to start due to some systemd tomfoolery.  I'm writing these notes in hopes that they:  </p> <ol> <li>Help someone else</li> <li>Remind me what to try the next time I need to set up Grafana  </li> </ol>"},{"location":"general_guides/grafana_server_on_focal_fossa/#installation","title":"Installation","text":"<p>Start by installing grafana through apt:  </p> <pre><code>sudo apt install grafana\n</code></pre> <p>At this point my installation was broken -- systemd couldn't start the service.  </p>"},{"location":"general_guides/grafana_server_on_focal_fossa/#change-the-port","title":"Change the Port","text":"<p>To change the port I had to edit three files:  </p> <ol> <li>File 1: <code>/etc/grafana/grafana.ini</code></li> <li>File 2: <code>/usr/share/grafana/conf/defaults.ini</code></li> <li>File 3: <code>/usr/share/grafana/conf/sample.ini</code></li> </ol> <p>In each one:  </p> <ol> <li>Find the line that reads <code>;http_port = 3000</code></li> <li>Change it to <code>http_port = [NEW_PORT_NUMBER]</code><ul> <li>Note the removal of the semi-colon, which uncomments the line</li> </ul> </li> </ol>"},{"location":"general_guides/grafana_server_on_focal_fossa/#edit-the-service-file","title":"Edit the Service File","text":"<p>For whatever reason the default service file doesn't seem to play nice with systemd on 20.04.  I had to comment out a ton of lines.  Here's the service file in full so it's easy to copy &amp; paste:  </p> <pre><code>[Unit]\nDescription=Grafana instance\nDocumentation=http://docs.grafana.org\nWants=network-online.target\nAfter=network-online.target\nAfter=postgresql.service mariadb.service mysql.service\n\n[Service]\nEnvironmentFile=/etc/default/grafana-server\nUser=grafana\nGroup=grafana\nType=simple\nRestart=on-failure\nWorkingDirectory=/usr/share/grafana\nRuntimeDirectory=grafana\nRuntimeDirectoryMode=0750\nExecStart=/usr/sbin/grafana-server                                                  \\\n                            --config=${CONF_FILE}                                   \\\n                            --pidfile=${PID_FILE_DIR}/grafana-server.pid            \\\n                            --packaging=deb                                         \\\n                            cfg:default.paths.logs=${LOG_DIR}                       \\\n                            cfg:default.paths.data=${DATA_DIR}                      \\\n                            cfg:default.paths.plugins=${PLUGINS_DIR}                \\\n                            cfg:default.paths.provisioning=${PROVISIONING_CFG_DIR}  \n\n\nLimitNOFILE=10000\nTimeoutStopSec=20\n#CapabilityBoundingSet=\n#DeviceAllow=\n#LockPersonality=true\n#MemoryDenyWriteExecute=false\n#NoNewPrivileges=true\n#PrivateDevices=true\n#PrivateTmp=true\n#ProtectClock=true\n#ProtectControlGroups=true\n#ProtectHome=true\n#ProtectHostname=true\n#ProtectKernelLogs=true\n#ProtectKernelModules=true\n#ProtectKernelTunables=true\n#ProtectProc=invisible\n#ProtectSystem=full\n#RemoveIPC=true\n#RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX\n#RestrictNamespaces=true\n#RestrictRealtime=true\n#RestrictSUIDSGID=true\n#SystemCallArchitectures=native\nUMask=0027\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"general_guides/grafana_server_on_focal_fossa/#restart-grafana-server","title":"Restart Grafana Server","text":"<p>With everything reset you should be able to start up the Grafana service.  I had to run these commands to clear everything up:  </p> <pre><code>$ sudo systemctl stop grafana-server.service\n$ sudo systemctl reset-failed grafana-server.service\n$ sudo systemctl start grafana-server.service\n</code></pre> <p>You can check whether the server is working by opening the server URL:PORT in a browser, or by checking it through systemd: <code>systemctl status grafana-server.service</code>.  </p> <p>If everything looks good the last thing to do is make Grafana run at startup:  </p> <pre><code>sudo systemctl enable grafana-server.service\n</code></pre>"},{"location":"general_guides/mqtt/","title":"MQTT","text":"<p>MQTT (Messaging Queueing Telemetry Transport) is a publish-subscribe protocol that helps bridge communications between disparate applications. In short, you can use it to send a message from one application to another.</p>"},{"location":"general_guides/mqtt/#installing-an-mqtt-broker","title":"Installing an MQTT Broker","text":"<p>A broker is required to serve as the \"hub\" for server/client connections. We can use <code>mosquitto</code> for this:</p> <pre><code>$ sudo apt install mosquitto mosquitto-clients\n</code></pre>"},{"location":"general_guides/mqtt/#configuring-mqtt-broker","title":"Configuring MQTT Broker","text":""},{"location":"general_guides/mqtt/#stop-the-service-first","title":"Stop the Service First","text":"<pre><code>$ sudo systemctl stop mosquitto.service\nOR\n$ sudo /etc/init.d/mosquitto stop\n</code></pre>"},{"location":"general_guides/mqtt/#configure-the-service","title":"Configure the Service","text":"<p>Edit the configuration file (default location below):</p> <pre><code>$ sudo nano /etc/mosquitto/mosquitto.conf\n</code></pre> <p>Example configuration:</p> <pre><code># Place your local configuration in /etc/mosquitto/conf.d/\n#\n# A full description of the configuration file is at\n# /usr/share/doc/mosquitto/examples/mosquitto.conf.example\n\npid_file /var/run/mosquitto.pid\n\npersistence true\npersistence_location /var/lib/mosquitto/\n\nlog_dest file /var/log/mosquitto/mosquitto.log\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\n\nconnection_messages true\n\nlog_timestamp true\n\ninclude_dir /etc/mosquitto/conf.d\n</code></pre>"},{"location":"general_guides/mqtt/#restart-the-mqtt-service","title":"Restart the MQTT Service","text":"<pre><code>$ sudo systemctl start mosquitto.service\nOR\n$ sudo /etc/init.d/mosquitto start\n</code></pre>"},{"location":"general_guides/mqtt/#testing-the-mqtt-broker","title":"Testing the MQTT Broker","text":"<p>You can test the publish/subscribe handshake before setting up any channels to confirm your configuration is good.  Do that like this:</p> <ol> <li>Open two terminal windows (or two ssh sessions)</li> <li>In one terminal, do: <code>$ mosquitto_sub -d -t hello/world</code><ul> <li>_sub = subscribe (or listen) for messages</li> <li>-d = debug the output</li> <li>-t = which thread (channel) to listen on</li> <li>hello/world = the name of the thread (channel) to communicate over</li> </ul> </li> <li>In the second terminal, do: <code>$ mosquitto_pub -d -t hello/world -m \"Test Message\"</code><ul> <li>-m = tell mosquitto to send a message</li> <li>\"Test Message\" = the content of the message we're sending</li> </ul> </li> <li>If all is well you should see the \"Test Message\" text appear in the first terminal window</li> </ol>"},{"location":"general_guides/mqtt/#setting-a-password","title":"Setting a Password","text":"<p>Defining a username &amp; password for the client(s) that want to connect to the service is a no-brainer.  Do that like so:</p> <pre><code>$ sudo mosquitto_passwd -c /etc/mosquitto/passwd &lt;username&gt;\n</code></pre> <p>This will let you specify a username.  Set it to anything you want (e.g. mosquittousr) then run the command. The terminal will automatically ask ou to create a password (store this somewhere safe).  </p> <p>You can disable anonymouse connections to the service by doing the following:</p> <ol> <li>Edit the mosquitto config file at: <code>$ sudo nano /etc/mosquitto/conf.d/default.conf</code></li> <li>Add these lines:     <code>allow_anonymous false     password_file /etc/mosquitto/passwd</code></li> <li>Restart the mosquitto service: <code>$ sudo systemctl restart mosquitto.service</code></li> </ol>"},{"location":"general_guides/native_firefox_installation_on_linux/","title":"How to Install Firefox Directly from Mozilla Builds on Linux","text":"<p>By default, most GNU/Linux distributions package their own Firefox builds for release via apt.  While this is perfectly suitable for most use cases, you often have to wait a few days before new releases are merged into your distribution's repositories.  As a result, you may not always have the latest security patches.  For those who need (or want) immediate updates direct from Mozilla, we can replace the distribution maintainer's copy quite easily.  </p>"},{"location":"general_guides/native_firefox_installation_on_linux/#back-up-firefox","title":"Back Up Firefox","text":"<p>Start by backing up your Firefox bookmarks, history, settings, addons, etc, if you've already started using the copy provided by your distribution's maintainer.  Firefox Sync is end-to-end encrypted which makes for an easy backup &amp; restore process.  Otherwise, you will need to manually export and reimport your customizations.  </p>"},{"location":"general_guides/native_firefox_installation_on_linux/#installing-dependencies","title":"Installing Dependencies","text":"<p>First, have a look at Firefox's required and optional dependencies: https://www.mozilla.org/en-US/firefox/system-requirements  </p> <p>Usually these are already installed by your distribution.  </p>"},{"location":"general_guides/native_firefox_installation_on_linux/#downloading-firefox","title":"Downloading Firefox","text":"<p>Download the latest version of Firefox directly from Mozilla's FTP listing here: https://ftp.mozilla.org/pub/firefox/releases  </p> <p>The directory listing (at time of writing) is like this:  </p> <ul> <li>Firefox Versions<ul> <li>platform<ul> <li>language  </li> </ul> </li> </ul> </li> </ul> <p>For example: To download the 64-bit, US English, Linux version of Firefox you'd go down this path: (latest version) &gt; linux-x86_64 &gt; en_US</p> <p>Then download the <code>.tar.bz2</code> AND the <code>.tar.bz2.asc</code> files.  </p>"},{"location":"general_guides/native_firefox_installation_on_linux/#installing-firefox","title":"Installing Firefox","text":"<p>Extract the <code>.tar.bz2</code> file you just downloaded:</p> <pre><code>$ cd $HOME/Downloads\n$ tar xjf firefox-*.tar.bz2\n</code></pre> <p>Then move the extracted folder to the <code>/opt</code> directory:</p> <pre><code>$ sudo mv firefox /opt/\n</code></pre> <p>Then create a symlink to the Firefox binary:</p> <pre><code>$ sudo ln -s /opt/firefox/firefox /usr/local/bin/firefox\n</code></pre>"},{"location":"general_guides/native_firefox_installation_on_linux/#creating-a-launcher-shortcut","title":"Creating a Launcher Shortcut","text":"<p>Next you'll want to create a new shortcut file so system utilities like the launcher or applications menu point to the new, Mozilla-sourced Firefox installation:</p> <pre><code>$ sudo wget https://raw.githubusercontent.com/Kmagameguy/dotfiles/main/desktop_files/firefox.desktop -P /usr/local/share/applications\n</code></pre>"},{"location":"general_guides/native_firefox_installation_on_linux/#purging-the-old-firefox","title":"Purging the Old Firefox","text":"<p>This step may differ depending on how your distribution packages Firefox (flatpak, snap, deb, rpm, etc).  In my case, Pop! OS currently distributes Firefox as an apt package, so removing it is easy:</p> <pre><code>$ sudo apt remove --purge firefox*\n</code></pre>"},{"location":"general_guides/native_firefox_installation_on_linux/#restoring-customizations","title":"Restoring Customizations","text":"<p>Launch Firefox and you'll see it's been reset to a fresh profile.  From here you can either sign in to Firefox sync or manually import your addons, settings, extensions, etc.</p>"},{"location":"general_guides/restic_guide/","title":"Restic Backup","text":"<p>Restic is a snapshot-based, git-like, encrypted backup solution.  You can use Restic to define repos (vaults, essentially) which can contain broad or specific backups of files/folders.  It is an astonishingly effective tool and in combination with resticprofile, a helper utility which lets you define backup configurations as YAML, the system is simple to configure to boot.</p> <p>My current backups are on an External Drive in a repo labeled \"ResticBackup\".</p>"},{"location":"general_guides/restic_guide/#todo","title":"TODO:","text":"<p>I need to rewrite this article. I'm no longer using Windows as my daily driver, and I've switched from using resticprofile to autorestic.</p>"},{"location":"general_guides/restic_guide/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>Scoop (Windows only)</li> <li>Restic</li> <li>Restic Profile</li> </ul> <p>TODO: See if AutoRestic is a better tool than Restic Profile</p> <p>Windows Only: Manually add <code>resticprofile.exe</code> to path. Windows Only: Installation is living at <code>D:\\Program Files\\resticprofile</code></p> <p>Backups are defined in <code>profiles.yaml</code></p>"},{"location":"general_guides/restic_guide/#restic-documentation","title":"Restic Documentation","text":"<p>https://restic.readthedocs.io/en/latest/manual_rest.html</p>"},{"location":"general_guides/restic_guide/#resticprofile","title":"ResticProfile","text":""},{"location":"general_guides/restic_guide/#update-resticprofile","title":"Update ResticProfile:","text":"<pre><code>$ resticprofile self-update\n</code></pre>"},{"location":"general_guides/restic_guide/#list-available-options","title":"List Available Options","text":"<pre><code>$ resticprofile profiles\n    Profiles available:\n      books:       (backup, snapshots)\n      default:     (backup)\n      development: (backup, snapshots)\n      music:       (backup, snapshots)\n      pictures:    (backup, snapshots)\n    Groups available:\n      full-backup:  music, pictures, development, books\n</code></pre>"},{"location":"general_guides/restic_guide/#run-a-backup","title":"Run a Backup","text":"<p>Run a full backup, using the group:</p> <pre><code>$ resticprofile --name \"full-backup\" backup\n</code></pre> <p>Alternatively, run for a single item:</p> <pre><code>$ resticprofile --name \"books\" backup\n</code></pre>"},{"location":"general_guides/restic_guide/#inspecting-a-backup","title":"Inspecting a Backup","text":"<p>List snapshots:</p> <pre><code>$ restic -r [backup_path] snapshots\n    enter password for repository:\n    ID       Date                Host  Tags      Directory\n    --------------------------------------------------\n    eeeeeeee 1969-01-01 01:00:00 REVAN documents /documents\n    ffffffff 1969-01-01 01:00:00 REVAN music     /music\n</code></pre>"},{"location":"general_guides/restic_guide/#restoring-backup","title":"Restoring Backup","text":"<p>From a snapshot:</p> <pre><code>$ restic -r [backup_path] restore [backup_id OR latest] --target [path_to_restore_to]\n</code></pre> <p>Restore specific path:</p> <pre><code>$ restic -r [backup_path] restore [backup_id OR latest] --path \"[path_to_restore]\" --target [path_to_restore_to]\n</code></pre>"},{"location":"general_guides/restic_guide/#removing-snapshots","title":"Removing Snapshots","text":"<p>TODO: add policy rules to resticprofile profiles.yaml to avoid manually managing snapshot history</p> <ul> <li>See Inspecting Backup to get snapshot IDs.</li> <li>Forget the snapshot with:</li> </ul> <pre><code>$ restic -r [backup_path] forget [snapshot_id]\n</code></pre> <ul> <li>To clean up unreferenced data:</li> </ul> <pre><code>$ restic -r [backup_path] prune\n</code></pre> <ul> <li>OR use an all-in-one and drop all but latest snapshot:</li> </ul> <pre><code>$ restic -r [backup_path] forget --keep-last 1 --prune\n</code></pre>"},{"location":"general_guides/upgrading_postgres/","title":"How to Upgrade a Postgres DB","text":"<p>Whenever there is a major release of PostgreSQL, you may run into the following issue after an update:</p> <p>Failure</p> <p>PostgreSQL Database directory appears to contain a database; skipping initialization 1969-01-01 00:00:00.505 UTC [1] FATAL: database files are incompatible with server 1969-01-01 00:00:00.505 UTC [1] DETAIL: The data directory was initialized by PostgreSQL version 13, which is not compatible with this version 14.0</p> <p>In these cases you will need to initialize a new db using postgreSQL:latest and then import the old records into the new database.  This guide assumes you are using docker-compose to manage your database.</p>"},{"location":"general_guides/upgrading_postgres/#downgrading-postgresql-database","title":"Downgrading PostgreSQL Database","text":"<p>If you've run into the error above, then it's probably safe to assume your db is in bad shape. When this happened to me, my container was in a permanently \"restarting\" state.  You can work around this by downgrading PostgreSQL to the last good configuration:</p> <ul> <li>Edit your docker-compose file and specify the last good tag for your db image</li> </ul> <pre><code>image: postgres:13.4\n</code></pre> <ul> <li>Then use <code>docker ps</code> to find the container ID of your running PostgreSQL instance</li> <li>Stop the container and remove the image</li> <li>Pull the db image for the newly added tag and recreate the container</li> </ul> <pre><code>$ docker container [container_id] stop\n$ docker container prune\n$ docker image prune -a\n$ docker-compose pull [service_name]\n$ docker-compose up --force-recreate -d [service_name]\n</code></pre> <p>Note</p> <p>Once the container is up and running you can double check to see if your service(s) are working again I find this helpful to do before proceeding, just to make sure there isn't another issue to worry about</p>"},{"location":"general_guides/upgrading_postgres/#make-a-snapshot-of-the-database","title":"Make a Snapshot of the Database","text":"<p>After rolling back to a good state we're ready to start the upgrade. The first thing to do is make a backup of the current database.  Before doing this, though, you may want to stop any services that depend on your database.  Doing this makes sure none of the data is changed while you're peforming updates!</p> <ul> <li>First, start by jumping into the docker container's shell:</li> </ul> <pre><code>$ docker exec -it [container_id] bash\nroot@[container_id]#/\n</code></pre> <ul> <li>Create a sql dump from the root shell:</li> </ul> <pre><code>$ pg_dumpall -U [db_username] &gt; /var/lib/postgresql/data/dump.sql\n</code></pre> <ul> <li>Enter your (root) db password when prompted</li> <li>If all goes well you should see clean output.  Congrats, your data is now backed up to the dump.sql file we specified in our command</li> </ul> <p><code>/var/lib/postgresql/data/</code> is the path to the docker volume.  If your path is different, make sure to change it.</p> <ul> <li>Stop the PostgreSQL container and move the <code>postgresql</code> folder to a backup location:</li> </ul> <pre><code>$ docker container [container_id] stop\n$ sudo mv /var/lib/postgresql /home/$USER/\n</code></pre>"},{"location":"general_guides/upgrading_postgres/#update-postgresql-create-a-fresh-database","title":"Update PostgreSQL &amp; Create a Fresh Database","text":"<ul> <li>Update the PostgreSQL tag in your docker-compose file:</li> </ul> <pre><code>$ image: postgres:14\n</code></pre> <ul> <li>Pull &amp; recreate the db container:</li> </ul> <pre><code>$ docker-compose pull postgres\n$ docker-compose up postgres --force-recreate -d\n</code></pre> <p>This will recreate the container's volume and initialize a fresh database</p>"},{"location":"general_guides/upgrading_postgres/#import-the-data-snapshot-into-the-new-database","title":"Import the Data Snapshot into the New Database","text":"<ul> <li>Copy the database backup into the refreshed docker volume</li> <li>Import the data into the newly set up database</li> </ul> <pre><code>$ sudo mv /home/$USER/postgresql/data/dump.sql /var/lib/postgresql/data/\n$ docker exec -it [container_id] bash\n$ psql -U [db_user] -d [db_name] &lt; /var/lib/postgresql/data/dump.sql\n</code></pre> <p>If all goes well, you should be able to restart your services without any issues.</p>"},{"location":"general_guides/using_docker_compose/","title":"How to Use Docker-Compose","text":""},{"location":"general_guides/using_docker_compose/#installing-docker","title":"Installing Docker","text":"<p>Use docker.io, which packages the docker engine in the debian/ubuntu philosophy (multi-package):</p> <pre><code>$ sudo apt install docker.io\n</code></pre>"},{"location":"general_guides/using_docker_compose/#installing-docker-compose","title":"Installing Docker-Compose:","text":"<pre><code>$ sudo curl -o /usr/local/bin/docker-compose -L \"https://github.com/docker/compose/releases/download/${DOCKER_VERSION}/docker-compose-$(uname -s)-$(uname -m)\"\n\n$ sudo chmod +x /usr/local/bin/docker-compose\n</code></pre> <p>where <code>${DOCKER_VERSION}</code> is the latest release ID.</p>"},{"location":"general_guides/using_docker_compose/#running-a-docker-compose-file","title":"Running a Docker-Compose File:","text":"<ol> <li>CD into the directory with the docker-compose YAML</li> <li>Pull the latest images for the applications defined in the docker-compose file, then launch a new container:</li> </ol> <pre><code>$ docker-compose pull\n\n  pulling [image]...done\n\n$ docker-compose up -d\n</code></pre> Note <p>The <code>-d</code> switch means to run the container in detached mode; important if you want to disconnect from the terminal or issue other commands</p>"},{"location":"general_guides/using_docker_compose/#updating-a-docker-compose-app","title":"Updating a Docker-Compose App","text":"<ol> <li>Pull the latest image and recreate the containers:</li> </ol> <pre><code>$ docker-compose pull\n\n  pulling [image]...done\n\n$ docker-compose up --force-recreate -d\n</code></pre> Note <p>You can also recreate a specific container by passing its name into the <code>docker-compose up</code> command like so: <code>docker-compose up --force-recreate -d &lt;container-name&gt;</code></p>"},{"location":"general_guides/using_docker_compose/#checking-what-docker-containers-are-running","title":"Checking What Docker Containers Are Running","text":"<p>You can inspect what's running like so:</p> <pre><code>docker ps\n</code></pre> <p>This will produce the names of the running containers and details about them (including uptime and healthchecks, where applicable).</p>"},{"location":"general_guides/using_docker_compose/#stopping-a-running-container","title":"Stopping a Running Container","text":"<p>You can stop a container like so:</p> <ol> <li>Use <code>docker ps</code> to get the ID of the container</li> <li>Stop the container:</li> </ol> <pre><code>docker container stop &lt;container-name&gt;\n</code></pre>"},{"location":"general_guides/using_docker_compose/#cleaning-out-old-containers-volumes-and-images","title":"Cleaning Out Old Containers, Volumes, and Images","text":"<p>After pulling a new image, recreating the container, and verifying that the new app image runs well, it's a good idea to wipe the old data from the system.  This will free up TONS of disk space as docker images can be several hundreds of megabytes large:</p> <ol> <li>Make sure everything is running before issuing the following command. It is destructive for anything not currently referenced by a running container:</li> </ol> <pre><code>docker system prune -af\n</code></pre>"},{"location":"general_guides/verifying_file_hashes/","title":"Verifying File Hashes","text":"<p>File hashes are unique, reproducible string sequences that identify the integrity another file.  They are usually provided alongside download links so that a user can compare their downloaded file's hash with the source hash.  This safeguards against supply chain attacks and data corruption that can occur during a download.</p>"},{"location":"general_guides/verifying_file_hashes/#linux","title":"Linux","text":"<p>Use the built-in <code>md5sum</code> or <code>sha256sum</code> commands:</p> <pre><code>$ md5sum /path/to/file\n\nOR\n\n$ sha256sum /path/to/file\n</code></pre>"},{"location":"general_guides/verifying_file_hashes/#windows","title":"Windows","text":"<p>Use the built-in <code>CertUtil</code> command:</p> <pre><code>Path:\\To\\File&gt; CertUtil -hashfile &lt;filename&gt; &lt;hashtype&gt;\n</code></pre> <p>Example:</p> <pre><code>CertUtil -hashfile pop_os.iso sha256\n</code></pre>"},{"location":"pop_os/controlling_amdgpu/","title":"Controlling AMDGPU","text":"<p>AMDGPU is the generic name for the AMD drivers for linux.  If you are using Pop! OS then the driver is already included in the distro's kernel. Nice.</p>"},{"location":"pop_os/controlling_amdgpu/#reading-gpu-properties","title":"Reading GPU Properties","text":"<p>Given the linux philosophy of \"everything is a file\", accessing GPU properties is trivial if you know where to look.  Some notable information is outlined below:</p>"},{"location":"pop_os/controlling_amdgpu/#device-properties-directory","title":"Device Properties Directory","text":"<p>Some of the enumerable values are system dependent, but they should (conceptually) be the same.  At time of writing here is where my device properties can be found:</p> <pre><code>$ ls /sys/class/drm/card0/device/hwmon/hwmon2/\n\n[..]\ntemp1_crit             temp1_label           temp2_input       temp3_emergency\ntemp1_crit_hyst        temp2_crit            temp2_label       temp3_input\ntemp_1_emergency       temp2_crit_hyst       temp3_crit        temp3_label\ntemp1_input            temp2_emergency       temp3_crit_hyst\n[...]\n</code></pre> <p>You can <code>cat</code>  the temp*_label files to see what each sensor is responsible for.  E.g.: - temp1 = edge temperature - temp2 = junction temperature - temp3 = mem temperature</p>"},{"location":"pop_os/controlling_amdgpu/#reading-temperature-values","title":"Reading Temperature Values","text":"<p>No one wants their system to overheat, so you may occasionally want to spot check the GPU's temperature sensors, specifically the edge value.  You can do that like so:</p> <pre><code>$ cat /sys/class/drm/card0/device/hwmon/hwmon2/temp1_input\n\n52000 \n</code></pre> <p>Where <code>52000</code> = 52 centigrade with three zeroes attached.</p>"},{"location":"pop_os/controlling_amdgpu/#reading-writing-fan-speed-values","title":"Reading &amp; Writing Fan Speed Values","text":"<p>Reading Values By default the fan speeds are operated in \"automatic\" mode by the system.  You can check the current fan speed like so:</p> <pre><code>$ cat /sys/class/drm/card0/device/hwmon/hwmon2/pwm1\n\n73\n</code></pre> <p>Where 73 = a fan speed of 28% (values are reported in PWM cycles, of which 255 is the maximum value.  A factor of 2.55 is used to convert back and forth.  E.g. multiply desired fan speed % by 2.55 to get the PWM value; or divide the PWM value by 2.55 to get the fan speed %).</p> <p>Writing Fan Speed Values You can take manual control of the fan speed if you know the GPU will be under stress or don't trust the built-in automatic management engine.  Do so like this:</p> <p>First, assume manual control:</p> <pre><code>$ echo \"1\" &gt; /sys/class/drm/card0/device/hwmon/hwmon2/pwm1_enable\n</code></pre> <p>Once set to manual mode you can push values to the fan speed controller.  First make sure you convert your desired fan speed % into a PWM value.</p> <p>For example, 50% * 2.55 = \ufeff128 (rounded to nearest whole number).  Set it like so:</p> <pre><code>$ echo \"128\" &gt; /sys/class/drm/card0/device/hwmon/hwmon2/pwm1\n</code></pre> <p>Resetting Fan Speed Management You may also resume automatic fan speed management. Do this like so:</p> <pre><code>$ echo \"2\" &gt; /sys/class/drm/card0/device/hwmon/hwmon2/pwm1_enable\n</code></pre> Note <p>You may need to restart the AMDGPU service to see the automatic management kick back up.  A reboot will work if you're not sure how to restart the service.</p>"},{"location":"pop_os/controlling_amdgpu/#references","title":"References","text":"<p>The great Arch Wiki entry for the Fan Speed Control contains a section dedicated to the AMDGPU driver:</p> <p>https://wiki.archlinux.org/title/fanspeedcontrol_#AMDGPU_sysfs_fan_control</p> <p>The <code>Issues</code> page for the AMDGPU driver can be useful if something seems broken.  Kernel updates are notorious for breaking the AMDGPU driver features; upgrade with caution:</p> <p>https://gitlab.freedesktop.org/drm/amd/-/issues</p>"},{"location":"pop_os/hp_printer_and_scanner_software/","title":"How To Install HP Printer/Scanner Drivers &amp; Software","text":"<p>The HP team provides linux-native drivers for many of their printers and scanners.  Unfortunately it seems like their installation packages are often out of date and don't fully support all spins of Debian/Ubuntu, like Pop! OS.  Generally speaking, HP Printers work fine out of the box, but if you want full wifi printing &amp; scanning support you will likely need their \"HPLIP\" driver &amp; software package.  </p> <p>The notes below describe how I was able to install the full software suite on Pop! OS 22.04.  </p>"},{"location":"pop_os/hp_printer_and_scanner_software/#getting-started","title":"Getting Started","text":"<p>As usual, the HPLIP software included in the Ubuntu/Pop! OS repositories is often out-of-date.  We'll need to do two things:  </p> <ol> <li>Install a more up-to-date copy of the HPLIP software</li> <li>(Optional) Install a proprietary binary which will allow you to take full advantage of your printer's features (as well as its scanning features, if you have a print/scan combo printer)  </li> </ol>"},{"location":"pop_os/hp_printer_and_scanner_software/#installing-hplip","title":"Installing HPLIP","text":"<ol> <li>Add the following PPA:     <code>sudo add-apt-repository ppa:kelebek333/hplip -y</code></li> <li>Update your apt cache:     <code>sudo apt update</code></li> <li>Install the HPLIP command-line utility, and the HPLIP GUI utility:     <code>sudo apt install hplip hplip-gui -y</code></li> </ol>"},{"location":"pop_os/hp_printer_and_scanner_software/#configuring-hplip-for-printing","title":"Configuring HPLIP for Printing","text":"<ol> <li>Open HPLIP Toolbox</li> <li>Connect your printer to your computer over USB OR if it is WiFi enabled, find its IP address</li> <li>Click the green \"+\" to \"Setup a new Device\"</li> <li>Select Universal Serial Bus (USB) if you are connecting over USB, OR in my case I selected \"Network/Ethernet/Wireless network (direct connection or JetDirect)\"<ol> <li>Select \"Show Advanced Options\"</li> <li>Click the box next to \"Manual Discovery\"</li> <li>Key in the IP address of the printer and leave the JetDirect port at \"1\"</li> </ol> </li> <li>Click \"Next\"</li> <li>If all goes well, the HP Device Manager window will show your printer's Model, IP Adress, Host Name, and Device URI</li> <li>Click \"Next\" again</li> </ol> <p>At this point you should be able to use the printing features of your unit.  But we're not done yet -- let's also set up scanning.</p>"},{"location":"pop_os/hp_printer_and_scanner_software/#installing-the-hp-proprietary-binary","title":"Installing the HP Proprietary Binary","text":"<p>For some reason the scanning features of my printer were not part of the open source HP drivers.  Also for some reason their plugin installation wizard seems to point to a dead resource, which caused the installation to fail whenever I tried to use it.  Great.  Let's go through the manual method so we can work around these headaches:  </p> <ol> <li>Run the HPLIP Toolbox program</li> <li>Go to \"Help &gt; About...\"</li> <li>Make note of your HPLIP software version - we'll need to download the matching proprietary binary<ol> <li>At time of writing, mine was 3.22.2, which was a few versions behind the latest available on HP's site</li> </ol> </li> <li>Head over to https://www.openprinting.org/download/printdriver/auxfiles/HP/plugins/</li> <li>You will need to download two files:<ol> <li>hplip-YOUR_HPLIP_VERSION-plugin.run</li> <li>hplip-YOUR_HPLIP_VERSION-plugin.run.asc</li> </ol> </li> <li>Then use the terminal to run the installation script<ol> <li>Note: The installer advises against running the script with <code>sudo</code> but I couldn't get it to work without doing so -- the installer wouldn't accept my root password (because there was none) <code>$ cd \"$HOME/Downloads\" $ sudo sh hplip-YOUR_HPLIP_VERSION-plugin.run</code></li> </ol> </li> <li>Follow any prompts shown by the script and at the end of it you should be able to use all the features of your printer/scanner.  </li> </ol> <p>In my case I had to use the HPLIP Toolbox software to \"Add\" the printer twice to unlock the printing AND scanning features.  Not sure what that was about but it doesn't seem to be a problem.  Aside from the toolbox software itself, none of the other programs on my computer noticed two copies of the same printer.</p>"},{"location":"pop_os/hp_printer_and_scanner_software/#printing-scanning-software","title":"Printing &amp; Scanning Software","text":"<p>Here are a few applications you can install if your distro doesn't come with printing &amp; scanning software by default:</p>"},{"location":"pop_os/hp_printer_and_scanner_software/#printing","title":"Printing","text":"<ol> <li>GNU Image Manipulation Program<ol> <li>Install as snap/flatpak package </li> </ol> </li> <li>GNOME Document Viewer</li> </ol>"},{"location":"pop_os/hp_printer_and_scanner_software/#scanning","title":"Scanning","text":"<ol> <li>GNOME Document Scanner</li> <li>XSane</li> </ol>"},{"location":"pop_os/logitech_g600_configuration/","title":"Configuring a Logitech G600 Mouse","text":"<p>By default the Logitech team does not provide GHub or Logitech Gaming Software for Linux.  This means we have to get creative if we want to map our MMO mouse's buttons to keypresses and macros.  Enter libratbag and Piper.</p>"},{"location":"pop_os/logitech_g600_configuration/#libratbag-libratbagd","title":"Libratbag &amp; Libratbagd","text":"<p>libratbag is a daemon that provides an API for Piper to use when translating button assignments to input device signals.  The project supports many devices out of the box, including the G600. Fantastic.</p> <p>To install:</p> <ul> <li>Add the PPA:</li> </ul> <pre><code>$ sudo add-apt-repository ppa:libratbag-piper/piper-libratbag-git\n</code></pre> <ul> <li>Update APT:</li> </ul> <pre><code>$ sudo apt update\n</code></pre> <ul> <li>Install the daemon:</li> </ul> <pre><code>$ sudo apt install libratbagd\n</code></pre> <ul> <li>Start the service:</li> </ul> <pre><code>$ sudo systemctl daemon-reload\n$ sudo systemctl reload dbus.service\n</code></pre> <ul> <li>Start the system automatically using systemctl:</li> </ul> <pre><code>$ sudo systemctl enable ratbagd.service\n</code></pre> <p>Next we'll install Piper which provides a GUI for configuring the mouse.</p>"},{"location":"pop_os/logitech_g600_configuration/#piper","title":"Piper","text":"<p>To install:</p> <ul> <li>The PPA from the libratbag section also includes the Piper application.  Nice.  Install it with:</li> </ul> <pre><code>$ sudo apt install piper\n</code></pre> <ul> <li>Run Piper and start plugging away at the settings.  Some tips &amp; tricks:<ul> <li>Use \"Send Keystroke\" to create multi-button \"macros\"</li> <li>Use Pop! OS' Keyboard Settings panel to create shortcuts to useful system actions that you can then use in PIper (e.g. volume up / down / mute)</li> </ul> </li> </ul>"},{"location":"pop_os/making_wifi_work/","title":"Making WiFi Work","text":"<p>At time of writing I'm using a 5GHz-band enabled USB dongle.  The first thing to do is to look up the model online and figure out what chipset the stick uses.  In my case it's an RTL8812au (realtek).</p> <p>From there I was able to find a driver that worked for me.  You may have to do extensive research because there may be multiple options available, and each may only work with certain distros and/or kernel versions.  It's kind of a mess out there.</p>"},{"location":"pop_os/making_wifi_work/#pre-requisites","title":"Pre-Requisites","text":"<ul> <li>DKMS for automatically recompiling drivers after kernel updates</li> </ul> <pre><code>$ sudo apt install dkms\n</code></pre> <ul> <li>Build essential tools to compile the drivers</li> </ul> <pre><code>$ sudo apt install build-essential libelf-dev linux-headers-`uname -r`\n</code></pre>"},{"location":"pop_os/making_wifi_work/#compiling-installing-the-driver","title":"Compiling &amp; Installing the Driver","text":"<ol> <li>Clone the repo somewhere useful, such as <code>/home/$USER/drivers</code></li> <li>Follow the README.md as different packages will probably require slightly different installation or compilation steps; in my case:</li> </ol> <pre><code>$ sudo make dkms_install\n</code></pre> <p>Alternatively if you'd like to manually compile &amp; install the driver:</p> <pre><code>sudo make &amp;&amp; make install\n</code></pre>"},{"location":"pop_os/making_wifi_work/#configuring-wifi-parameters","title":"Configuring WiFi Parameters","text":"<p>Usually this is enough to get a baseline WiFi connection going.  However in most cases the connection speed is abysmal.  Some further tweaks that can help get speeds back up to par are below. AFAICT just running through all three causes no harm (some may need to be re-applied after major updates):</p>"},{"location":"pop_os/making_wifi_work/#turn-off-wifi-power-management","title":"Turn off WiFi Power Management","text":"<ul> <li>Open the power management conf for editing:</li> </ul> <pre><code>$ sudo nano /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf\n</code></pre> <ul> <li>Change the value from 3 to 2 &amp; save.</li> </ul>"},{"location":"pop_os/making_wifi_work/#remove-backport-iwlwifi-dkms-package","title":"Remove backport-iwlwifi-dkms Package","text":"<p>See: https://bugs.launchpad.net/ubuntu/+source/backport-iwlwifi-dkms/+bug/1869588</p> <pre><code>$ sudo apt remove backport-iwlwifi-dkms\n</code></pre>"},{"location":"pop_os/making_wifi_work/#instruct-pop-os-to-prefer-ipv4-over-ipv6","title":"Instruct Pop! OS to Prefer IPv4 over IPv6","text":"<p>See: https://askubuntu.com/questions/764387/very-slow-internet-connection-on-ubuntu-16-04</p> <p>Open the following conf file for editing:</p> <pre><code>$ sudo nano /etc/gai.conf\n</code></pre> <p>Then find the <code>Precedence ::ffff:0:0/96 10</code>  line and remove the leading <code>#</code> to uncomment the setting.  This will turn off power-saving mode on the WiFi dongle.</p> <p>Reboot after applying these changes and run a speedtest.</p>"},{"location":"pop_os/pipewire/","title":"Setting Up PipeWire with EasyEffects","text":"<p>Since starting out with Pop! OS I have encountered two annoying issues with the audio system:  </p> <ol> <li>Dynamic Range compression (aka Loudness Equalization) is almost required to make the audio listenable</li> <li>Audio latency on my input mic is really bad.  My broadcast audio in video meetings is almost a full second out of sync with my webcam video  </li> </ol> <p>The former I had been addressing via PulseEffects-Legacy, but that only worsened the audio latency.  PulseEffects didn't like buffer sizes smaller than <code>4096</code>, either, despite my desktop being pretty powerful.  </p> <p>After extensive research it sounded like PipeWire could be a cure-all.  I've only been running it for a little while but I'm happy to report my audio performance does indeed seem much better.  Luckily, Pop!'s packages include PipeWire (albeit not the latest release) so it was pretty easy to set up.</p> Tip <p>Before starting, I would recommend making a Timeshift snapshot.  The first time I tried to set up PipeWire resulted in undetectable input/output devices and Timeshift made undoing the carnage much easier than manually removing and downgrading packages.</p>"},{"location":"pop_os/pipewire/#dumping-pulseeffects","title":"Dumping PulseEffects","text":"<p>Since PulseEffects is designed for PulseAudio, and superseded by EasyEffects, it's best to dump it first.  In my case I was using a native package instead of a flatpak so I just removed it with apt:  </p> <pre><code>sudo apt remove pulseeffects\n</code></pre> <p>Leftover Audio Modules</p> <p>When removing pulseeffects apt may suggest other audio plugins / modules for removal.  Leave these alone -- EasyEffects can make use of them once we install it later.</p>"},{"location":"pop_os/pipewire/#installing-pipewire","title":"Installing PipeWire","text":"<p>As mentioned above, PipeWire is included in Pop!'s package manager.  It won't be the latest version, but I think it is better to install the included copy rather than pulling newer versions from a PPA or elsewhere.  In theory the included version will be less likely to break future Pop! OS distro releases.  Of course, I am not doing any audio editing/mixing/streaming so my needs may differ from yours.  If you are doing music production, for instance, it might make sense to seek out newer versions of PipeWire which will undoubtedly contain stability/quality of life improvements.  </p> <p>Anyway, in addition to PipeWire we'll load up some other packages to support GStreamer plugins, JACK, and Bluetooth audio.</p>"},{"location":"pop_os/pipewire/#pipewire","title":"PipeWire","text":"<p>Install PipeWire core:</p> <pre><code>sudo apt install pipewire\n</code></pre>"},{"location":"pop_os/pipewire/#pipewire-add-ons","title":"PipeWire Add-Ons","text":"<p>Install the GStreamer, Bluetooth, and JACK support (curate to your liking):</p> <pre><code>sudo apt install gstreamer1.0-pipewire libpipewire-0.3-{0,dev,modules} libspa-0.2-{bluetooth,dev,jack,modules} pipewire{,-{audio-client-libraries,pulse,media-session,bin,tests}}\n</code></pre>"},{"location":"pop_os/pipewire/#reboot","title":"Reboot","text":"<p>Restart to make sure the system picks up the changes:</p> <pre><code>systemctl reboot\n</code></pre>"},{"location":"pop_os/pipewire/#confirming-pipewire-installation","title":"Confirming PipeWire Installation","text":"<p>Once the system starts back up it should automatically be using PipeWire.  You can check by running:</p> <pre><code>pactl info | grep '^Server Name'\n</code></pre> <p>The output should look something like:</p> <pre><code>Server Name: PulseAudio (on PipeWire 0.3.32)\n</code></pre> <p>That's pretty much it!  Next we'll add EasyEffects so we can do system-wide loudness equalization.</p>"},{"location":"pop_os/pipewire/#easyeffects","title":"EasyEffects","text":"<p>EasyEffects is the PipeWire replacement for the PulseEffects-Legacy project and only works with PipeWire.  It works like a souped up equalizer that can manipulate input/output devices or individual applications via plugins (e.g. compressors, gates, limiters, etc).  </p>"},{"location":"pop_os/pipewire/#installing-easyeffects","title":"Installing EasyEffects","text":"<p>Unfortunately it only seems to come packaged as a flatpak for debian-based systems so we'll have to install it that way:  </p> <pre><code>sudo flatpak install flathub com.github.wwmm.easyeffects\n</code></pre> <p>Select \"Y\" when prompted by the flathub tool to install EasyEffects &amp; its plugins.</p>"},{"location":"pop_os/pipewire/#importing-the-loudness-equalization-preset","title":"Importing the Loudness Equalization Preset","text":"<p>We're going to make this really easy by borrowing a preset that's already been put together by <code>Digitalone1</code> on GitHub:</p> <ol> <li>Open terminal and navigate to a sensible place to temporarily store Digitalone1's repo</li> <li> <p>Download the repo contents:  </p> <pre><code>git clone https://github.com/Digitalone1/EasyEffects-Presets.git\n</code></pre> </li> <li> <p>Copy the preset into this EasyEffects directory:  </p> <pre><code>cp LoudnessEqualizer.json ~/.var/app/com.github.wwmm.easyeffects/config/easyeffects/output/\n</code></pre> </li> </ol> <p>That will pre-load the preset for use in EasyEffects.  Note the filename is important: <code>LoudnessEqualizer.json</code> is the file you want.  Once the file has been copied over you can delete the Digitalone1 repo from your system.</p>"},{"location":"pop_os/pipewire/#configuring-easyeffects","title":"Configuring EasyEffects","text":"<p>Setting up loudness equalization from here is simple:  </p> <ol> <li>Start EasyEffects</li> <li>Make sure the <code>Output</code> tab is selected</li> <li>Click the <code>Presets</code> dropdown</li> <li>Click the <code>Speakers</code> tab</li> <li>Find the LoudnessEqualizer preset entry and click <code>Load</code></li> </ol> <p>Nice, preset is loaded.  Before we can call it job done we'll want to alter some basic quality of life settings:  </p> <ol> <li>Start EasyEffects if it's not already open</li> <li>Hit the hamburger menu and open <code>Preferences</code></li> <li>Change these settings on the <code>General</code> tab:<ul> <li>Start Service at Login: ON</li> <li>Shutdown on Window Close: OFF</li> <li>Process All Inputs: OFF</li> <li>(OPTIONAL) Use Dark Theme: Your choice</li> </ul> </li> <li>Explore the settings on the <code>Spectrum</code> tab.  My config is below:<ul> <li>State -&gt; Enabled: ON</li> <li>Shape: Bars</li> <li>Points: 50</li> <li>Height: 240px</li> <li>Line Width: 5px</li> <li>Fill: ON</li> <li>Show Bars Border: ON</li> <li>Rounded Corners: OFF</li> </ul> </li> <li>Close the <code>Preferences</code> pane</li> <li>Switch the main interface to the <code>PipeWire</code> tab</li> <li>Make sure <code>Output</code> is selected at the very bottom of this panel</li> <li>Open <code>General</code></li> <li>Unless you have multiple input devices, turn off the Input Device -&gt; Use Default setting and hard assign your microphone to the dropdown menu</li> <li>Open <code>Presets Autoloading</code></li> <li>Select your default speakers AND the LoudnessEqualizer preset, then click the Plus (+) button<ul> <li>This will make sure the loudness equalizer is always applied to your default audio device</li> </ul> </li> </ol> <p>Now we are all set!  You can also explore other goodies inside EasyEffects, such as microphone settings.  I have a simple preset configured which boosts the volume a hair and fixes the audio/video desync issue I mentioned at the outset:  </p> <ol> <li>Open EasyEffects</li> <li>Switch to the <code>Input</code> tab</li> <li>Switch to the <code>Plugins</code> module</li> <li>Click <code>Add Plugin -&gt; Loudness</code></li> <li>Set FFT Size to <code>256</code><ul> <li>This sets a small buffer to decrease latency</li> </ul> </li> <li>Set Output Volume to +0.5dB<ul> <li>This boosts the mic volume half a decibel.  This was just enough to get my microphone working at a reasonable volume</li> </ul> </li> </ol> <p>Now there's nothing left to do but enjoy a usable audio experience!  </p>"},{"location":"pop_os/snaps_with_symlinks/","title":"Make Snaps Play Nicely With Home Directory Symlinks","text":""},{"location":"pop_os/snaps_with_symlinks/#overview","title":"Overview","text":"<p>As it turns out, Canonical's snap packages are complete trash (queue  gasps of surprise from no-one).  I was recently forced to install the snap package manager so that I could use my 2FA app of choice, Authy, on my desktop.  It worked for a little while until one day it suddenly broke with absolutely zero helpful error or log information.  </p> <p>After spending some time on the snapcraft forums I found a post from users who experienced the same problem.  It turns out, snap utterly fails if any directories in your <code>home</code> folder are symlinked to paths on a separate drive.  </p> <p>WHAT.  </p> <p>Here is the post in question: https://forum.snapcraft.io/t/some-snaps-will-only-launch-the-first-time/18509/12 </p> <p>I don't know if this \"ogra\" user is a representative of Canonical or not but their reply is exactly the sort of garbage that drives people away from linux: \"just use bind mounts in your fstab\".  OK, sure, that is easy enough to do if you understand mounts in the first place.  Canonical MUST fix these problems if they want to win the war over dependency-packaged-apps.  The suggestion by this forum poster is the same sort of nonsense everyone roasted Steve Jobs for whenever he'd say outlandish things like \"you're holding your iPhone wrong\".  </p> <p>Anyway, I digress.  Let's look at how I fixed this issue WITHOUT fussing with bind mounts.  Of course, your mileage may vary.  I am lucky because Authy is the ONLY snap package on my system, and further, it is a very simple application that does not require filesystem access on account of it simply being a provider of 2FA codes.  </p>"},{"location":"pop_os/snaps_with_symlinks/#fixing-authys-filesystem-access","title":"Fixing Authy's Filesystem Access","text":"<p>Snaps all seem to come with a <code>user-dirs.dirs</code> file which contains a set of paths the snap scans on launch.  We can simply remove the file or comment out the contents to get authy working again:  </p>"},{"location":"pop_os/snaps_with_symlinks/#option-1-delete-the-file","title":"Option 1: Delete the File","text":"<p>This is the simplest option but is harder to recover from if a snap still won't work.  </p> <ol> <li>Open terminal</li> <li>Run <code>sudo rm ~/snap/authy/current/.config/user-dirs.dirs</code></li> <li>Launch authy</li> </ol>"},{"location":"pop_os/snaps_with_symlinks/#option-2-comment-out-the-file-contents","title":"Option 2: Comment-Out the File Contents","text":"<p>This is slightly more work but makes it easier to undo changes.  </p> <ol> <li>Open terminal</li> <li>Run <code>sudo nano ~/snap/authy/current/.config/user-dirs.dir</code></li> <li>Prefix EACH LINE with a comment character: <code>#</code></li> <li>Save the file with this key sequence: <code>Ctrl + X</code>, <code>Y</code>, <code>ENTER</code></li> <li>Launch authy</li> </ol> <p>And you should be good to go.  You will need to do this for each snap if it doesn't launch.  So far it seems like Bitwarden and Authy are the most likely to break if your home directory makes use of symlinks.  </p> <p>The bad news is you will probably have to re-apply this tweak whenever your snaps receive updates.  The good news is Twilio seems like a fairly lazy company and rarely (if ever) publishes updates to their Authy snap package.  </p> <p>I really hope Canonical shapes up and fixes these dumb bugs in their package manager. As it stands, AppImages, Flatpaks, and good old .debs seem to be leaps and bounds more reliable.</p>"},{"location":"pop_os/working_with_firefox_profiles/","title":"Firefox Profiles","text":"<p>Firefox comes packaged with a profile management utility.  This is useful if you want to maintain completely separate \"installations\" of firefox for different use cases.  For example, maybe you want a \"work\" profile and \"personal\" profile in which neither share any bookmarks, history, downloads, etc.  Firefox profiles allow you to do this, and different profiles can even run concurrently with the help of customer launcher entries.</p>"},{"location":"pop_os/working_with_firefox_profiles/#create-a-new-profile-using-profile-manager","title":"Create A New Profile Using Profile Manager","text":"<p>Open terminal and run:</p> <pre><code>$ firefox --profilemanager\n</code></pre> <p>From the GUI, choose \"Create Profile\" and give it a name.  Make note of this name as we'll be using it to configure the custom launcher.</p>"},{"location":"pop_os/working_with_firefox_profiles/#create-the-launcher-entry","title":"Create the Launcher Entry","text":"<p>Instead of running profile manager to launch the different instances of Firefox, we'll map the new one to a new launcher item.  Do that like so:</p> <pre><code>$ nano ~/.local/share/application/firefox-PROFILENAME.desktop\n\n[Desktop Entry]\nEncoding=UTF-8\nName=Firefox PROFILENAME\nExec=firefox -P PROFILENAME -no-remote --class PROFILENAMEProfile\nIcon=firefox\nType=Application\nStartupNotify=True\nStartupWMClass=PROFILENAMEProfile\n</code></pre> <p>Where \"PROFILENAME\" should be replaced with the name you gave the profile.</p>"},{"location":"raspbian_os/headless_setup/","title":"Headless Raspberry Pi from Scratch","text":"<p>Settings up a raspberry pi for headless networking is pretty simple, and a great way to experiment with ssh, networking, gnu/linux, and the commandline -- especially for beginners.  This guide will walk you through first-time system setup.</p>"},{"location":"raspbian_os/headless_setup/#pre-requisites","title":"Pre-requisites:","text":"<ul> <li>A wifi-enabled (or ethernet-port-having) Raspberry Pi board</li> <li>A power supply for the Raspberry Pi board</li> <li>A microSD card</li> <li>microSD card port or dongle for your computer</li> <li>An internet connection</li> </ul>"},{"location":"raspbian_os/headless_setup/#flashing-the-os","title":"Flashing the OS","text":"<p>We'll be using raspbian, the official OS maintained by the Raspberry Pi manufacturer.  It is a Debian-linux derivative which means stability and familiarity for those who have used Debian or its other popular derivatives (Ubuntu, Pop!, Mint, etc).  </p>"},{"location":"raspbian_os/headless_setup/#basic-settings","title":"Basic Settings","text":"<ol> <li>Download and install the Raspberry Pi Imager tool</li> <li>Plug the microSD card into your computer</li> <li>Open the Pi Imager</li> <li>Click \"Choose OS\" and open Pi OS (other) &gt; Raspberry Pi OS Lite (32-bit)</li> <li>Click \"Choose Storage\" and select your microSD card</li> <li>Press Ctrl + Shift + X to open the Pi imager's secret settings menu</li> </ol>"},{"location":"raspbian_os/headless_setup/#hostname","title":"Hostname","text":"<ol> <li> <p>Enable \"Set Hostname:\" and change it to something you like</p> Warning <p>Hostnames can ONLY use characters a-z, 0-9, and dash \"-\".  Any other characters are invalid and may cause problems so  avoid them!</p> </li> </ol>"},{"location":"raspbian_os/headless_setup/#ssh","title":"SSH","text":"<ol> <li>Enable \"Enable SSH\" and set the radio button to \"Use password Authentication\"</li> <li>Set a strong password and keep it somewhere safe -- you'll use this every time you try to connect to your pi<ul> <li>We'll change this to proper ssh key authorization later.</li> </ul> </li> </ol>"},{"location":"raspbian_os/headless_setup/#optional-configure-wifi","title":"OPTIONAL: Configure WiFi","text":"<p>If you'll be connecting to your network WiFi and not via ethernet cable:  </p> <ol> <li>Enable \"Configure wifi\"</li> <li>Type in your network's name into the \"SSID\" field</li> <li>Type in your WiFi password into the \"Password\" field</li> <li>Select the appropriate entry for your part of the world in the \"Wifi country\" field</li> </ol>"},{"location":"raspbian_os/headless_setup/#locale","title":"Locale","text":"<ol> <li>Enable \"Set locale settings\"</li> <li>Select the appropriate time zone for your part of the world</li> <li>Type in the appropriate keyboard layout for your part of the world</li> </ol>"},{"location":"raspbian_os/headless_setup/#persistent-settings","title":"Persistent settings","text":"<ol> <li>Disable \"Enable telemetry\".  Yuck.  </li> </ol> <p>When all's done click \"Save\", then \"WRITE\".  After a short time the pi OS will be written to the SD card and ready to ship!</p>"},{"location":"raspbian_os/headless_setup/#first-boot","title":"First Boot","text":"<p>Safely remove your SD card from your computer and plug it into the Raspberry Pi.  As soon as you connect the Pi to a power source it will boot up! Give it ~3-5 minutes to finish the boot process and then head over to your router's dashboard in your browser. Everyone's router dashboard will look different, but there should be a way to see the name &amp; IP address of any connected devices.  Look for an entry that matches the hostname you set above.  In some cases the pi's hostname may be reported as \"none\".  Just make note of any \"suspicious\" devices in the list and their IP addresses.</p> <ol> <li>With IP address(es) in hand, open your terminal</li> <li>SSH to the new system with: <code>ssh pi@&lt;your_hostname&gt;</code> (e.g. <code>ssh pi@raspberrypi</code>)<ul> <li>If you get an error, try using the IP address instead of the hostname, e.g.: <code>ssh pi@192.168.0.40</code></li> </ul> </li> <li>Enter the password you set in the Pi Imager's advanced tools section when prompted, then hit return/enter.  </li> </ol> <p>You will now be connected to the Pi system's commandline over ssh.  This allows you to control the system remotely without a keyboard, mouse, or monitored connected up to the system. Slick!  </p>"},{"location":"raspbian_os/headless_setup/#use-the-full-sd-card","title":"Use the Full SD Card","text":"<p>By default Raspbian may not \"see\" the full capacity of the SD card.  This can be fixed quickly by issuing the following commands over the SSH connection:  </p> <ol> <li><code>raspi-config --expand-rootfs</code></li> <li><code>sudo reboot</code></li> </ol> <p>The second command will restart the system, naturally disconnecting your SSH connection.</p>"},{"location":"raspbian_os/headless_setup/#optional-raspberry-pi-4-only-use-64bit-kernel","title":"OPTIONAL - RASPBERRY PI 4 ONLY: Use 64bit Kernel","text":"<p>The newer Raspberry Pi 4 boards can run the 64-bit linux kernel. This can provide some performance improvements over the 32-bit kernel so it's usually worth enabling:  </p> <ol> <li>Over an SSH connection, run: <code>sudo nano /boot/config.txt</code></li> <li>Add the following line to the very end of the file (on a new line):     <code>arm_64bit=1</code></li> <li>Press Ctrl + X to enter \"save\" mode, then \"Y\" to confirm the edits, then return/enter to commit the changes to disk</li> <li>Run: <code>sudo reboot</code> </li> </ol> <p>You can then verify whether the system is using the 64bit kernel:  </p> <ol> <li>Reconnect over SSH</li> <li>Run <code>uname -a</code></li> <li>The output should include <code>aarch64</code>. If you see this then you are on the 64bit kernel </li> </ol>"},{"location":"raspbian_os/headless_setup/#assign-a-static-ip-address","title":"Assign a Static IP Address","text":"<p>The last thing we need is for the Pi's IP address to change on us periodically.  So, we'll set a static IP address to make sure we can always find it:  </p> <ol> <li>Make sure you have an active SSH connection to the Pi (see steps above)</li> <li>Type <code>sudo nano /etc/dhcpcd.conf</code> to open an in-terminal text editor (you'll be prompted for the pi user's password).  Add the following snippet to the very bottom of the file:  </li> </ol> <pre><code>interface wlan0 (or use eth0 if your Pi is connected to the router via ethernet cable)\nstatic ip_address=&lt;DESIRED_IP&gt;/24\nstatic routers=&lt;ROUTER_IP&gt;\nstatic domain_name_servers=&lt;ROUTER_IP&gt;\n</code></pre> <p>Explanation:  </p> <ul> <li>routers: The IP address of your ROUTER (usually something like 192.168.0.1)</li> <li>ip_address: The desired network address you want to reach your Pi at.  This should be the same as your Router's IP but with the final number modified, e.g.: 192.168.0.30<ul> <li>Don't exceed a value of 255</li> <li>Pick a number that isn't already in use by one of your connected devices</li> </ul> </li> <li>domain_name_servers: The IHP address of your ROUTER (again)  </li> </ul> <p>Continuing with the edits:  </p> <ol> <li>Press Ctrl + X to set nano into \"save\" mode</li> <li>Press \"Y\" then return/enter to write the changes to disk</li> <li>Lastly enter the command <code>sudo reboot</code> and press return/enter  </li> </ol> <p>The Pi system will restart so it can pick up the configuration changes.  Your ssh session will automatically disconnect too.  </p>"},{"location":"raspbian_os/headless_setup/#configuring-user-credentials","title":"Configuring User Credentials","text":"<p>Next we'll rename the default user (pi).  The default username is easy for an attacker to guess, since, well, it's the default for all fresh Raspbian installations.  Changing it to something else will make it more memorable for us, and less guessable for any potential threats.  We can't change the pi username while we're logged into the account, so we will temporarily make use of the ROOT account:</p> <ol> <li>SSH to the Pi</li> <li>Run <code>sudo passwd</code> to set a root user password (remember it for now but it'll be irrelevant later)</li> <li>Run <code>sudo nano /etc/ssh/sshd_config</code> to open the ssh config file in nano for editing</li> <li> <p>Change this line:  </p> <p><code>#PermitRootLogin prohibit-password</code> </p> <p>TO  </p> <p><code>PermitRootLogin yes</code> </p> <p>(note the missing octothorpe)  </p> </li> <li> <p>Press Ctrl + X, Y, return/enter to save the changes</p> </li> <li>Run <code>sudo reboot</code> </li> </ol> <p>Now, we'll connect as the ROOT user instead of the Pi user once the system starts up again:  </p> <ul> <li>Run <code>ssh root@&lt;pi_hostname_or_ip_address&gt;</code> and enter the ROOT password you just set  </li> </ul> <p>Change the \"pi\" username to something new.  This can be any name you want so long as your remember it:  </p> <ol> <li>Run <code>usermod -l &lt;new_user&gt; pi usermod -m -d /home/&lt;new_user&gt; &lt;new_user&gt;</code><ul> <li>Example: <code>usermod -l larry pi usermod -m -d /home/larry larry</code></li> </ul> </li> <li>Drop the SSH connection with Ctrl + D</li> <li>Reconnect the SSH session using the new username (same password as the old pi user): <code>&lt;new_user&gt;@&lt;pi_hostname_or_ip_address&gt;</code></li> <li>Run <code>sudo passwd -l root</code> to disable the root user entirely (for security)</li> <li>Run <code>sudo nano /etc/ssh/sshd_config</code></li> <li> <p>Undo the changes you made earlier:  </p> <p><code>PermitRootLogin yes</code> </p> <p>BACK TO  </p> <p><code>#PermitRootLogin prohibit-password</code> </p> <p>(note the return of octothorpe)  </p> </li> <li> <p>Drop the SSH connection with Ctrl + D  </p> </li> </ol> <p>Now you have a new username and the ROOT account is protected.  </p>"},{"location":"raspbian_os/headless_setup/#configuring-ssh","title":"Configuring SSH","text":"<p>Next we'll work on strengthening our ssh connection.  This is especially important if the Pi will be exposed to the public internet.  Otherwise, in addition to being more secure, ssh key pairs are also more convenient to use since they (can) safely work passwordless.  </p> <p>On the host machine create a new key/pair with the ssh-keygen tool.  If you're on linux already this should be installed by default.  If not, you may need to look up a guide for your operating system:  </p> <ol> <li>Create a new pair with <code>ssh-keygen -t ed25519</code> and follow the terminal prompts<ul> <li>Give the key a useful name, like myserver_rsa</li> <li>You CAN add a password if you'd like. This is a good idea if the server will be accessible from the public internet. If it will only be accessible to your local network you can forego the password option</li> <li>This command will create two files: myserver_rsa and myserver_rsa.pub. Never ever ever share the myserver_rsa file.  This is your private key. Think of it like a password -- you don't want anyone to know it.  The .pub file on the other hand you can share around wherever you like!</li> </ul> </li> <li>Install the new PUBLIC key on the server: <code>ssh-copy-id -i /path/to/myserver_rsa.pub &lt;pi_username&gt;@&lt;pi_hostname_or_ip_address&gt;</code></li> <li>SSH to the Pi -- it should happen without a password prompt (unless you added a password to the SSH key itself)  </li> </ol> <p>With our key/pair set up we can disable ssh connections via plain-old password authentication for even better security:  </p> <ol> <li>Over an SSH connection, run <code>sudo nano /etc/ssh/sshd_config</code> to edit the Pi's ssh config again</li> <li> <p>Change the following:  </p> <p><code>#PasswordAuthentication yes</code> </p> <p>TO  </p> <p><code>PasswordAuthentication no</code> </p> <p>(note the missing octothorpe)  </p> </li> <li> <p>Press Ctrl + X, Y, return/enter to save the changes</p> </li> <li>Run: <code>sudo reboot</code> </li> </ol> <p>And that is pretty much it!  From here you may want to explore other security software, such as a firewall (UFW) and an intrusion detector/logger (Fail2Ban), especially if this Pi will be serving applications that are accessible from the public internet.  Other good choices include wireguard, which will set up a VPN that you can use to access your network on the go, or NGINX which could be used as a simple webserver or reverse proxy.  </p>"},{"location":"raspbian_os/latest_apache2_on_raspbian/","title":"Install Latest Apache2 On Raspbian","text":"<p>As with most distributions, raspbian does not always come packaged with the latest copy of the apache2 webserver.  If you use apache2 to host a service (such as nextcloud) you may want to replace the built-in repo with the latest upstream build from Debian.  This ensures critical security fixes are available more quickly.</p>"},{"location":"raspbian_os/latest_apache2_on_raspbian/#how-to-configure-raspbian","title":"How to Configure Raspbian","text":"<p>Start by adding the upstream repository and its gpg keys to apt's source list. Make sure <code>wget</code> is available, then:</p> <pre><code>sudo wget -O /etc/apt/trusted.gpg.d/apache2.gpg https://packages.sury.org/apache2/apt.gpg\necho \"deb https://packages.sury.org/apache2/ $(lsb_release -sc) main\" | sudo tee /etc/apt/sources.list.d/apache2.list\nsudo apt update\n</code></pre> <p>Then, install the latest apache:</p> <pre><code>sudo apt install -y apache2\n</code></pre> <p>To confirm whether the update worked, run:</p> <pre><code>apache2 -v\n</code></pre> <p>The commandline should print the now-installed apache2 version, which you can compare to the PPA's webpage.  The version on the system should match the latest version described in the PPA details: https://launchpad.net/~ondrej/+archive/ubuntu/apache2</p> <p>You can also restart the server manually if you'd like to make sure the updates are in use:</p> <pre><code>sudo service apache2 restart\n</code></pre>"},{"location":"recipes/hershey_kiss_peanut_butter_cookies/","title":"Hershey's Kiss Peanut Butter Cookies","text":"<p>Barely a recipe, this one's a cozy fall/winter favorite.</p>"},{"location":"recipes/hershey_kiss_peanut_butter_cookies/#equipment","title":"Equipment","text":"<ol> <li>1 large sheet pan</li> <li>1 large bowl</li> </ol>"},{"location":"recipes/hershey_kiss_peanut_butter_cookies/#ingredients","title":"Ingredients","text":"<ol> <li>1 Egg</li> <li>1 Cup white sugar</li> <li>1 Cup peanut butter (smooth)</li> <li>1 Bag of Hershey's chocolate candy kisses</li> </ol>"},{"location":"recipes/hershey_kiss_peanut_butter_cookies/#directions","title":"Directions","text":"<ol> <li>Pre-heat oven to 350 degrees</li> <li>Combine egg, sugar, and peanut butter into a bowl</li> <li>Use hands to roll mixture into 1-inch diameter, PERFECTLY shaped spheres; place each onto ungreased sheet pan leaving about 1-inch of space inbetween</li> <li>Count how many cookies are on the pan, then unwrap an equal amount of  Hershey's kisses </li> <li>Pop pan into oven and bake for 10 minutes</li> <li>Remove from oven and carefully press 1 chocolate into the middle of  each cookie</li> <li>Return pan to oven for ~1 minute to roast the tip of the chocolate kiss</li> <li>Remove from heat and let stand 2-3 minutes or until you can lift the cookie  from the sheet without breaking it apart</li> <li><code>C O N S U M E</code></li> </ol> <p>Super delicious with a glass of whole milk.</p>"},{"location":"recipes/jennifer_aniston_salad/","title":"The Jennifer Aniston Salad","text":"<p>Rumor has it this is what Jennifer Aniston ate every day during FRIENDS filming.  Recipe is divided into two sections: The salad and the dressing.</p>"},{"location":"recipes/jennifer_aniston_salad/#equipment","title":"Equipment","text":"<ol> <li>1 mixing bowl</li> <li>1 large bowl</li> <li>Rice cooker (or stovetop pot w/lid)</li> </ol>"},{"location":"recipes/jennifer_aniston_salad/#ingredients","title":"Ingredients","text":"<ol> <li>2 baby cucumbers</li> <li>1 lemon</li> <li>1 garlic clove</li> <li>1 can chickpeas</li> <li>1 cup crumbled feta</li> <li>1 cup quinoa</li> <li>1/2 cup olive oil</li> <li>1/2 red onion</li> <li>1/3 cup mint</li> <li>1/3 cup parsley</li> <li>1/3 cup walnuts</li> <li>Salt</li> <li>Pepper</li> </ol>"},{"location":"recipes/jennifer_aniston_salad/#make-the-salad","title":"Make the Salad","text":""},{"location":"recipes/jennifer_aniston_salad/#1a-stovetop","title":"1.a. Stovetop","text":"<ol> <li>Add quinoa and 2 cups water to stovetop pot</li> <li>Heat on high until water boils</li> <li>Cover with the lid and reduce heat to LOW</li> <li>Continue cooking for ~20 minutes until quinoa is soft and most of the water has boiled off</li> </ol>"},{"location":"recipes/jennifer_aniston_salad/#1b-rice-cooker","title":"1.b. Rice Cooker","text":"<ol> <li>Add quinoa and 2 cups water to rice cooker</li> <li>Cook fully</li> </ol>"},{"location":"recipes/jennifer_aniston_salad/#2-prepare-the-other-salad-ingredients","title":"2. Prepare the Other Salad Ingredients","text":"<ol> <li>Chop cucumbers</li> <li>Rinse &amp; drain chickpeas</li> <li>Chop mint</li> <li>Chop parsley</li> <li>Chop walnuts</li> <li>Dice red onion</li> </ol>"},{"location":"recipes/jennifer_aniston_salad/#3-make-the-dressing","title":"3. Make the Dressing","text":"<ol> <li>Pour olive oil into mixing bowl</li> <li>Juice the lemon into the mixing bowl</li> <li>Grate garlic clove into the mixing bowl</li> <li>Sprinkle in salt &amp; pepper</li> </ol>"},{"location":"recipes/jennifer_aniston_salad/#4-combine-and-serve","title":"4. Combine and Serve","text":"<ol> <li>Combine all remaining ingredients into the mixing bowl</li> <li>Mix together</li> <li>Serve</li> </ol>"},{"location":"recipes/mango_cinnamon_habanero_hot_sauce/","title":"Mango-Cinnamon-Habanero Hot Sauce","text":"<p>This is a recipe for a thick and delicious hot sauce.  With habaneros as the main ingredient, this sauce is sure to please the chilihead in you.  </p> Tip <p>Warning: Fumes produced by this recipe can be harsh on the eyes.  I recommend wearing eye protection and working in a well ventilated area.  If your kitchen doesn't have a window, try using a box fan to disperse the fumes.  </p>"},{"location":"recipes/mango_cinnamon_habanero_hot_sauce/#equipment","title":"Equipment","text":"<ol> <li>A couple hot sauce jars OR a quart-sized mason jar</li> <li>1 Large boiling pot</li> <li>1 Cutting board</li> <li>1 Chef's knife</li> <li>A food processor</li> </ol>"},{"location":"recipes/mango_cinnamon_habanero_hot_sauce/#ingredients","title":"Ingredients","text":"<ol> <li>5 Habanero peppers</li> <li>1 Mango</li> <li>1 White Onion</li> <li>4 Garlic cloves</li> <li>1/2 cup Apple Cider Vinegar</li> <li>1/4 cup Water</li> <li>2 Tablespoons of Honey</li> <li>1/4 Teaspoon Cumin</li> <li>1/2 Teaspoon Crushed Black Pepper</li> <li>1 Teaspoon Cinnamon</li> <li>1 Teaspoon Salt  </li> </ol>"},{"location":"recipes/mango_cinnamon_habanero_hot_sauce/#directions","title":"Directions","text":"<ol> <li>Peel and chop the Mango</li> <li>Chop the onion &amp; garlic</li> <li>Halve the habaneros</li> <li>Combine all ingredients into food processor</li> <li>Run food processor until the blend is smooth (or, allow for some chunkiness if desired -- this step is to taste!)</li> <li>Pour processed mix into a large pan and boil</li> <li>Reduce heat and simmer for about 12 minutes</li> <li>Remove pan from heat and let the sauce cool</li> <li>Pour sauce into jars  </li> </ol> <p>Goes well with meaty dishes since the sauce is on the thicker side (porkchops, chicken, that kind of thing).  Keep sauce stored in the refrigerator to ensure longevity.</p>"},{"location":"recipes/mediterranean_chopped_salad/","title":"Mediterranean Chopped Salad","text":"<p>A staple mediterranean dish that works equally well as both an appetizer and a light main course.</p>"},{"location":"recipes/mediterranean_chopped_salad/#equipment","title":"Equipment","text":"<ol> <li>Chef's knife</li> <li>Cutting board</li> <li>Large serving bowl</li> </ol>"},{"location":"recipes/mediterranean_chopped_salad/#ingredients","title":"Ingredients","text":"<ol> <li>2 Cucumbers</li> <li>2 Tomatoes</li> <li>1 Red Onion</li> <li>1 Cup Chopped Italian Parsley</li> <li>1 Red Bell Pepper</li> <li>1/8 Cup Lemon Juice</li> <li>1 Teaspoon Salt</li> <li>1 Teaspoon Crushed Black Pepper</li> <li>Olive Oil (to taste)</li> <li>1/8 Cup Mint leaves</li> <li>1/4 Cup Kalamata Olives (pitted)</li> <li>Feta Cheese Crumbles  </li> </ol>"},{"location":"recipes/mediterranean_chopped_salad/#directions","title":"Directions","text":"<ol> <li>Finely chop the cucumbers, onion, parsley, and mint</li> <li>De-seed and finely chop the tomatoes and bell pepper</li> <li>Combine cucumbers, tomatoes, onion, parsley, bell pepper, lemon juice, salt, black pepper, mint, and olives into a large serving bowl</li> <li>Drizzle a generous amount of olive oil on top of the mix</li> <li>Sprinkle Feta cheese crumbles on top of the mix (to taste)</li> <li>Mix everything together with a large spoon or ladle</li> <li>Serve</li> </ol>"},{"location":"recipes/roasted_pumpkin_seeds/","title":"Roasting Pumpkin Seeds","text":"<p>A simple no-fuss recipe for roasting pumpkin seeds.</p>"},{"location":"recipes/roasted_pumpkin_seeds/#equipment","title":"Equipment","text":"<ol> <li>1 large sheet pan</li> <li>1 large bowl</li> <li>1 small bowl</li> <li>Non-stick spray, butter, or parchment paper; dealer's choice</li> </ol>"},{"location":"recipes/roasted_pumpkin_seeds/#ingredients","title":"Ingredients","text":"<ol> <li>1 (or more) pumpkin(s)</li> <li>Olive oil</li> <li>Kosher salt</li> <li>Optional:<ul> <li>Paprika</li> <li>Crushed black pepper</li> <li>Chili powder (or something stronger for some HEAT)</li> </ul> </li> </ol>"},{"location":"recipes/roasted_pumpkin_seeds/#directions","title":"Directions","text":"<ol> <li>Put non-stick treament of choice on to the sheet pan</li> <li>Scrape out the insides of the pumpkin(s) into a large bowl</li> <li>Carefully pick out the pumpkin seeds and place them into the smaller bowl, separating them from the gooey insides (this will take a while)<ul> <li>It's ok if some of the goo gets in the pan; it's inevitable really.  Try to avoid big clumps</li> </ul> </li> <li>Pre-heat oven to 350 degrees<ul> <li>Rack position doesn't really matter</li> </ul> </li> <li>Add a couple splashes of olive oil to the small bowl, along with the salt and other optional ingredients (season to taste, there's no wrong amounts here)</li> <li>Toss them around with your hands, then pour the contents of the small bowl into the sheet pan</li> <li>Spread the seeds in the pan so they are 1 layer thick</li> <li>Make sure oven is fully pre-heated, then put the pan into the oven and roast for 20 minutes</li> <li>The seeds should be a golden brown color when they're done; you may need to add 5-8 minutes to the bake time depending on your oven</li> <li>While seeds are roasting, rinse and dry the small bowl</li> <li>Let the seeds rest 2-3 minutes on the pan then transfer back into the small bowl and serve</li> </ol> <p>This is one of my favorite Halloween-night traditions. \ud83c\udf83\ufe0f</p>"},{"location":"recipes/spicy_pickles/","title":"Spicy Pickles for Chilliheads","text":"<p>Do you like pickles but wish they stung your tongue like a thousand tiny scorpions? Here's a recipe for you.  </p> <p>Caution</p> <p>Boiling the brine produces one heck of a smell.  Be sure you have good ventilation and maybe even a mask &amp; eye protection if you're particularly sensitive to strong aromas.  You've been warned!</p>"},{"location":"recipes/spicy_pickles/#equipment","title":"Equipment","text":"<ul> <li>Cutting Board</li> <li>Chef's Knife (or Crinkle Cutter)</li> <li>32oz. Mason Jar</li> <li>1 Big Stovetop Pot</li> <li>Cheesecloth  </li> </ul>"},{"location":"recipes/spicy_pickles/#ingredients","title":"Ingredients","text":"<ul> <li>2lb Cucumbers (regular or pickling style are fine!)</li> <li>1.5 Cups White Vinegar</li> <li>Hot Peppers (dealer's choice)</li> <li>2 Cup Water</li> <li>2 Tbsp Salt</li> <li>3 Tsp Sugar</li> <li>8 Cloves Garlic</li> <li>1/8 Tsp Alum</li> <li>Fresh Dill</li> <li>Black Peppercorns</li> <li>Crushed Red Pepper Flakes  </li> </ul>"},{"location":"recipes/spicy_pickles/#directions","title":"Directions","text":"<ol> <li>Set out the cutting board</li> <li>Wash and dry the mason jar</li> <li>Wash and dry the cucumbers</li> <li>Slice cucumbers into eighths lengthwise OR into 1/4\" chips (sandwich style)</li> <li>Peel and finely chop garlic cloves</li> <li>Add dill, peppercorns, and red pepper flakes into a cheesecloth</li> <li>Dump the vinegar, water, salt, and sugar into a pot, stir ingredients until dissolved</li> <li>Knot cheesecloth and set inside the pot with the other ingredients</li> <li>Let brine raise to a boil, then reduce heat and let simmer a couple minutes</li> <li>Meanwhile, chop the tops off the hot peppers and peel the garlic</li> <li>Toss the peppers, garlic, and alum into the mason jar</li> <li>Add more peppercorns and red pepper flakes to the mason jar (be liberal with these!)</li> <li>Take brine off the heat and pour into the mason jar, leave about a finger's width of space from the top</li> <li>Carefully seal the jar with its lid and let cool to room temp</li> <li>Once the jar is room temp, stuff it into the fridge and let it pickle for three weeks</li> <li>After three weeks, enjoy the heat!  </li> </ol> <p>Goes great with cheese!</p>"},{"location":"recipes/turkey_meatballs/","title":"Turkey Meatballs","text":"<p>Simple recipe -- easy meatballs using lean Turkey for your health.  </p>"},{"location":"recipes/turkey_meatballs/#equipment","title":"Equipment","text":"<ol> <li>1 large sheet pan</li> <li>1 large bowl  </li> </ol>"},{"location":"recipes/turkey_meatballs/#ingredients","title":"Ingredients","text":"<ol> <li>1-lb Ground Turkey (leaner the better)</li> <li>1 Egg</li> <li>1 Can Tomato Paste</li> <li>1/2 Cup Gluten Free Panko</li> <li>1 Onion</li> <li>3-4 Cloves Garlic</li> <li>Salt</li> <li>Pepper</li> <li>Non-stick spray</li> <li>(Optional) Any other seasonings you want  </li> </ol>"},{"location":"recipes/turkey_meatballs/#directions","title":"Directions","text":"<ol> <li>Pre-heat oven to 375 degrees</li> <li>Combine all ingredients in a large bowl (with a pinch or two of salt &amp; pepper)</li> <li>Use your hands to evenly mix everything</li> <li>Apply non-stick spray to sheet pan</li> <li>Form 1\" diameter balls using your hands and place on sheet pan (~1-2\" apart)</li> <li>Bake for 15-20 minutes in the oven until browned.  Internal temp should be at least 165 degrees</li> <li>Remove from heat and let rest for a minute or two</li> <li>Serve</li> </ol> <p>Goes well with a side of rice and sheet pan fried vegetables.  </p>"},{"location":"zzz_legacy_guides/","title":"Deprecated &amp; Legacy Guides","text":"<p>This section contains guides that are either superseded by better guides or make use of tools/processes that I don't use anymore.  However, I want to keep them around for historical purposes.</p>"},{"location":"zzz_legacy_guides/fixing_the_audio_system/","title":"(Deprecated) System-Wide Loudness Equalization on Pop! OS","text":"Deprecated Guide <p>As of Jan 2022 I have started to experiment with Pipewire &amp; EasyEffects.  The guide below should be perfectly serviceable for anyone using PulseAudio &amp; PulseEffects-Legacy</p> <p>I've found Pop! OS' default dynamic range to be wayyyyy too large.  Even at ~15% volume dialogue vs. action sequences are like the difference between a whisper and a siren going off in your ears.  We can use PulseEffects to emulate Windows' \"Loudness Equalization\" feature across the whole system.</p>"},{"location":"zzz_legacy_guides/fixing_the_audio_system/#installation","title":"Installation","text":"<p>PulseEffects can be installed on bare metal or via flatpak.  It offers a GUI which can be used to enable all sorts of audio filters for pulseaudio.  For now I've decided on using the flatpak release, but I may switch to a bare metal install since flatpaks can't be set to launch on startup.</p> <ol> <li>Install the flatpak:</li> </ol> <pre><code>$ sudo flatpak install flathub com.github.wwmm.pulseeffects\n</code></pre> Note <p>Be sure to install PulseEffects, NOT EasyEffects! EasyEffects requires PipeWire which we're not interested in dealing with at the moment.</p>"},{"location":"zzz_legacy_guides/fixing_the_audio_system/#configuration","title":"Configuration","text":"<p>Luckily another github user has done the hard work for us and offers a repository with a Loudness Equalization preset.</p> <ol> <li>Clone the config files to somewhere useful</li> <li>Copy the LoudnessEqualizerPE.json file to the flatpak's data folder:<ul> <li><code>~/.var/app/com.github.wwmm.pulseeffects/config/PulseEffects/output/</code></li> </ul> </li> <li>Run PulseEffects</li> <li>Click the \"Presets\" button at the top, find the Loudness Equalization preset and load it</li> <li>Turn on the \"Start Service at Login\" setting in PulseEffects' settings menu</li> <li>Close the app and it will continue to operate in the background</li> </ol> Note <p>You can also use PulseEffects to apply compressor, limiter, gate, and other effects to your microphone!</p>"},{"location":"zzz_legacy_guides/fixing_the_audio_system/#assign-shortcuts-to-volume-up-down-steps","title":"Assign Shortcuts to Volume Up / Down Steps","text":"<p>For some reason Pop! OS doesn't assign keys to the mute / volume-up / volume-down shortcuts by default.  We can add our own using the Settings &gt; Keyboard &gt; Customize Shortcuts panel.</p> <ol> <li>Find the \"Sound and Media\" subcategory</li> <li>Add shortcuts to the volume keys, e.g.:<ul> <li>Volume Down =&gt; Super + F2</li> <li>Volume Up   =&gt; Super + F3</li> <li>Mute/Unmute =&gt; Super + F1 As a bonus, these can then be used in Piper, if you have that set up!</li> </ul> </li> </ol>"},{"location":"zzz_legacy_guides/fixing_the_audio_system/#fix-volume-up-down-increments","title":"Fix Volume Up / Down Increments","text":"<p>By default, GNOME sets the volume up / down increments to 6%.  This makes it REALLY hard to find a volume level that lands in just the right spot between not-too-quiet and not-too-loud.  Luckily there is a setting we can tweak to set this however we'd like.</p>"},{"location":"zzz_legacy_guides/fixing_the_audio_system/#check-current-increment-value","title":"Check Current Increment Value","text":"<p>First, let's see what the volume increment is set to:</p> <pre><code>$ gsettings get org.gnome.settings-daemon.plugins.media-keys volume-step\n</code></pre> <p>At time of writing, the default returned is \"6\" (i.e. 6%) To change the value we can use <code>gsettings</code> again, but with the \"set\" command.</p> Warning <p>The volume-step setting must be between values of 1 and 20</p> <p>For example, to set an increment of 2%:</p> <pre><code>$ gsettings set org.gnome.settings-daemon.plugins.media-keys volume-step 2\n</code></pre> <p>The change should take effect immediately.  You can check whether the change was accepted by re-running the <code>gsettings get</code> command above.</p>"},{"location":"zzz_legacy_guides/fixing_the_audio_system/#fix-audio-popping","title":"Fix Audio Popping","text":"<p>I've noticed my line-out speakers seem to power down / power up frequently.  The indicator is a punchy popping sound whenever a new sound alert is triggered (it is especially bad whenever I receive a message notification in GChat over Google Chrome).</p> <p>It looks like you can fix that by turning off power-saving settings for the device.  Notes taken from here: https://askubuntu.com/questions/1230833/annoying-click-popping-sound-on-ubuntu-20-04</p>"},{"location":"zzz_legacy_guides/fixing_the_audio_system/#check-sound-cards-power-save-mode","title":"Check Sound Card's Power Save Mode","text":"<pre><code>cat /sys/module/snd_hda_intel/parameters/power_save\n</code></pre> <p>If it returns a value of <code>1</code>, then power saving is enabled.  To temporarily turn this off to test for effectiveness, do this:</p> <pre><code>echo \"0\" | sudo tee /sys/module/snd_hda_intel/parameters/power_save\n</code></pre> <p>If this change works then you can persist the configuration like so:</p> <pre><code>echo \"options snd_hda_intel power_save=0\" | sudo tee -a /etc/modprobe.d/audio_disable_powersave.conf\n</code></pre> <p>(Optional) You can also do the same for <code>power_save_controller</code> by following steps 1, 2, &amp; 3 above, but by replacing <code>power_save</code> with <code>power_save_controller</code>, AND changing <code>0</code> to <code>N</code>.</p> <p>ALTERNATIVE OPTION Some users have reported that the above fix does not work for them.  As an alternative, the Arch Wiki explains how to disable power saving mode at the pulseaudio level: https://wiki.archlinux.org/title/Power_management#PulseAudio</p> <ul> <li>Open <code>/etc/pulse/default.pa</code> for editing</li> <li>Find the <code>load-module module-suspend-on-idle</code> line and comment it out</li> <li>Restart PulseAudio like so:</li> </ul> <pre><code>systemctl restart --user pulseaudio\n</code></pre>"}]}